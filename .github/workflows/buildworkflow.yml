# This is a basic workflow to help you get started with Actions
name: Azure deployment build
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY_NAME: smregistry1
  CLUSTER_NAME: sm_k8s_cluster2
  CLUSTER_RESOURCE_GROUP: sm_resources2
  NAMESPACE: ingress-basic2
  APP_NAME: ng-ad-app
  SECRET: sm-secret2

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      # Connect to Azure Container Registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container Registry (ACR)
      - run: |
          docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest
      # Set the target Azure Kubernetes Service (AKS) cluster.
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
      # Create namespace if doesn't exist
      - run: |
          namespacePresent=`kubectl get namespace | grep ${{ env.NAMESPACE }} | wc -l`
          if [ $namespacePresent -eq 0 ]
          then
            echo `kubectl create namespace ${{ env.NAMESPACE }}`
          fi  
      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          force: true

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            cluster-issuer.yaml
            service-deployment.yaml
          images: |
            ${{ env.REGISTRY_NAME }}.azurecr.io/images/${{ env.APP_NAME }}:latest
          imagepullsecrets: |
            ${{ env.SECRET }}  
          namespace: ${{ env.NAMESPACE }}
