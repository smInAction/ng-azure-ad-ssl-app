{"ast":null,"code":"/*! @azure/msal-browser v2.15.0 2021-06-29 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ThrottlingUtils, ClientAuthError } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants, ApiId } from '../utils/BrowserConstants.js';\nimport { InteractionHandler } from './InteractionHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RedirectHandler =\n/** @class */\nfunction (_super) {\n  __extends(RedirectHandler, _super);\n\n  function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, browserCrypto) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;\n\n    _this.browserCrypto = browserCrypto;\n    return _this;\n  }\n  /**\r\n   * Redirects window to given URL.\r\n   * @param urlNavigate\r\n   */\n\n\n  RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var navigationOptions, navigate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n            if (!!StringUtils.isEmpty(requestUrl)) return [3\n            /*break*/\n            , 7]; // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n\n            if (params.redirectStartPage) {\n              this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n              this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            } // Set interaction status in the library.\n\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.browserRequestLogger.infoPii(\"RedirectHandler.initiateAuthRequest: Navigate to: \" + requestUrl);\n            navigationOptions = {\n              apiId: ApiId.acquireTokenRedirect,\n              timeout: params.redirectTimeout,\n              noHistory: false\n            };\n            if (!(typeof params.onRedirectNavigate === \"function\")) return [3\n            /*break*/\n            , 4];\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n            navigate = params.onRedirectNavigate(requestUrl);\n            if (!(navigate !== false)) return [3\n            /*break*/\n            , 2];\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n            return [4\n            /*yield*/\n            , params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            // Navigate window to request URL\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n            return [4\n            /*yield*/\n            , params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handle authorization code response in the window.\r\n   * @param hash\r\n   */\n\n\n  RedirectHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule, clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"RedirectHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            } // Interaction is completed - remove interaction status.\n\n\n            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            } // Remove throttle if it exists\n\n\n            if (clientId) {\n              ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest.authority, this.authCodeRequest.scopes);\n            }\n\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n\n  return RedirectHandler;\n}(InteractionHandler);\n\nexport { RedirectHandler };","map":{"version":3,"sources":["../../src/interaction_handler/RedirectHandler.ts"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;AAoBqC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;;AAIjC,WAAA,eAAA,CAAY,cAAZ,EAAqD,WAArD,EAAuF,eAAvF,EAAwI,oBAAxI,EAAsK,aAAtK,EAA4L;AAA5L,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAN,EAAsB,WAAtB,EAAmC,eAAnC,EAAoD,oBAApD,KAAyE,IAD7E;;AAEI,IAAA,KAAI,CAAC,aAAL,GAAqB,aAArB;;AACH;;;;;;;AAMK,EAAA,eAAA,CAAA,SAAA,CAAA,mBAAA,GAAN,UAA0B,UAA1B,EAA8C,MAA9C,EAAoE;;;;;;AAChE,iBAAK,oBAAL,CAA0B,OAA1B,CAAkC,4CAAlC;iBAEI,CAAC,WAAW,CAAC,OAAZ,CAAoB,UAApB,C,EAAD,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA,C;;AAEA,gBAAI,MAAM,CAAC,iBAAX,EAA8B;AAC1B,mBAAK,oBAAL,CAA0B,OAA1B,CAAkC,gFAAlC;AACA,mBAAK,cAAL,CAAoB,iBAApB,CAAsC,kBAAkB,CAAC,UAAzD,EAAqE,MAAM,CAAC,iBAA5E,EAA+F,IAA/F;AACH,a;;;AAGD,iBAAK,cAAL,CAAoB,iBAApB,CAAsC,kBAAkB,CAAC,sBAAzD,EAAiF,gBAAgB,CAAC,6BAAlG,EAAiI,IAAjI;AACA,iBAAK,cAAL,CAAoB,gBAApB,CAAqC,KAAK,eAA1C,EAA2D,KAAK,aAAhE;AACA,iBAAK,oBAAL,CAA0B,OAA1B,CAAkC,uDAAqD,UAAvF;AACM,YAAA,iBAAiB,GAAsB;AACzC,cAAA,KAAK,EAAE,KAAK,CAAC,oBAD4B;AAEzC,cAAA,OAAO,EAAE,MAAM,CAAC,eAFyB;AAGzC,cAAA,SAAS,EAAE;AAH8B,aAAvC;kBAOF,OAAO,MAAM,CAAC,kBAAd,KAAqC,U,GAArC,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,iBAAK,oBAAL,CAA0B,OAA1B,CAAkC,2EAAlC;AACM,YAAA,QAAQ,GAAG,MAAM,CAAC,kBAAP,CAA0B,UAA1B,CAAX;kBAGF,QAAQ,KAAK,K,GAAb,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,iBAAK,oBAAL,CAA0B,OAA1B,CAAkC,0FAAlC;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAM,CAAC,gBAAP,CAAwB,gBAAxB,CAAyC,UAAzC,EAAqD,iBAArD,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,aAAA;;;AAEA,iBAAK,oBAAL,CAA0B,OAA1B,CAAkC,6FAAlC;AACA,mBAAA,CAAA;AAAA;AAAA,aAAA;;;;;;;;;AAIJ,iBAAK,oBAAL,CAA0B,OAA1B,CAAkC,wEAAlC;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAM,CAAC,gBAAP,CAAwB,gBAAxB,CAAyC,UAAzC,EAAqD,iBAArD,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,aAAA;;;;;;;;;AAIJ,iBAAK,oBAAL,CAA0B,IAA1B,CAA+B,4DAA/B;AACA,kBAAM,gBAAgB,CAAC,6BAAjB,EAAN;;;;;;;;;AAEP,GA7CK;;;;;;;AAmDA,EAAA,eAAA,CAAA,SAAA,CAAA,kBAAA,GAAN,UAAyB,YAAzB,EAA+C,KAA/C,EAA8D,SAA9D,EAAoF,aAApF,EAAmH,QAAnH,EAAoI;;;;;;AAChI,iBAAK,oBAAL,CAA0B,OAA1B,CAAkC,2CAAlC,E;;AAGA,gBAAI,WAAW,CAAC,OAAZ,CAAoB,YAApB,CAAJ,EAAuC;AACnC,oBAAM,gBAAgB,CAAC,oBAAjB,CAAsC,YAAtC,CAAN;AACH,a;;;AAGD,iBAAK,cAAL,CAAoB,UAApB,CAA+B,KAAK,cAAL,CAAoB,gBAApB,CAAqC,kBAAkB,CAAC,sBAAxD,CAA/B;AAGM,YAAA,QAAQ,GAAG,KAAK,cAAL,CAAoB,gBAApB,CAAqC,KAArC,CAAX;AACA,YAAA,YAAY,GAAG,KAAK,cAAL,CAAoB,iBAApB,CAAsC,QAAtC,CAAf;;AACN,gBAAI,CAAC,YAAL,EAAmB;AACf,oBAAM,eAAe,CAAC,wBAAhB,CAAyC,cAAzC,CAAN;AACH;;AACK,YAAA,gBAAgB,GAAG,KAAK,UAAL,CAAgB,sBAAhB,CAAuC,YAAvC,EAAqD,YAArD,CAAnB;AAGA,YAAA,QAAQ,GAAG,KAAK,cAAL,CAAoB,gBAApB,CAAqC,YAArC,CAAX;AACA,YAAA,WAAW,GAAG,KAAK,cAAL,CAAoB,iBAApB,CAAsC,QAAtC,CAAd,C;;AAGN,iBAAK,eAAL,CAAqB,IAArB,GAA4B,gBAAgB,CAAC,IAA7C;iBAGI,gBAAgB,CAAC,wB,EAAjB,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,4BAAL,CAAkC,gBAAgB,CAAC,wBAAnD,EAA6E,SAA7E,EAAwF,aAAxF,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;AAGJ,YAAA,gBAAgB,CAAC,KAAjB,GAAyB,WAAW,IAAI,SAAxC;AACA,YAAA,gBAAgB,CAAC,KAAjB,GAAyB,YAAzB,C;;AAGA,gBAAI,gBAAgB,CAAC,WAArB,EAAkC;AAC9B,mBAAK,eAAL,CAAqB,UAArB,GAAkC,gBAAgB,CAAC,WAAnD;AACH,aAFD,MAEO;AACG,cAAA,aAAa,GAAG,KAAK,mBAAL,EAAhB;;AACN,kBAAI,aAAJ,EAAmB;AACf,qBAAK,eAAL,CAAqB,aAArB,GAAqC,aAArC;AACH;AACJ,a;;;AAGD,gBAAI,QAAJ,EAAc;AACV,cAAA,eAAe,CAAC,cAAhB,CAA+B,KAAK,cAApC,EAAoD,QAApD,EAA8D,KAAK,eAAL,CAAqB,SAAnF,EAA8F,KAAK,eAAL,CAAqB,MAAnH;AACH;;AAGqB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,UAAL,CAAgB,YAAhB,CAA6B,KAAK,eAAlC,EAAmD,gBAAnD,CAAN,CAAA;;;AAAhB,YAAA,aAAa,GAAG,EAAA,CAAA,IAAA,EAAhB;AAEN,iBAAK,cAAL,CAAoB,mBAApB,CAAwC,KAAxC;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,aAAP,CAAA;;;;AACH,GAtDK;;AAuDV,SAAA,eAAA;AAvHA,C,CAAqC,kB","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorizationCodeClient, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AuthenticationResult, ThrottlingUtils, Authority, INetworkModule, ClientAuthError, Logger } from \"@azure/msal-common\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { ApiId, BrowserConstants, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\n\nexport type RedirectParams = InteractionParams & {\n    navigationClient: INavigationClient;\n    redirectTimeout: number;\n    redirectStartPage: string;\n    onRedirectNavigate?: (url: string) => void | boolean;\n};\n\nexport class RedirectHandler extends InteractionHandler {\n\n    private browserCrypto: ICrypto;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger, browserCrypto: ICrypto) {\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\n        this.browserCrypto = browserCrypto;\n    }\n\n    /**\n     * Redirects window to given URL.\n     * @param urlNavigate\n     */\n    async initiateAuthRequest(requestUrl: string, params: RedirectParams): Promise<void> {\n        this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n        // Navigate if valid URL\n        if (!StringUtils.isEmpty(requestUrl)) {\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.browserRequestLogger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.acquireTokenRedirect,\n                timeout: params.redirectTimeout,\n                noHistory: false\n            };\n            \n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n            if (typeof params.onRedirectNavigate === \"function\") {\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n                const navigate = params.onRedirectNavigate(requestUrl);\n\n                // Returning false from onRedirectNavigate will stop navigation\n                if (navigate !== false) {\n                    this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                    return;\n                } else {\n                    this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n                    return;\n                }\n            } else {\n                // Navigate window to request URL\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                return;\n            }\n        } else {\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n    }\n\n    /**\n     * Handle authorization code response in the window.\n     * @param hash\n     */\n    async handleCodeResponse(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule, clientId?: string): Promise<AuthenticationResult> {\n        this.browserRequestLogger.verbose(\"RedirectHandler.handleCodeResponse called\");\n\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n            throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        const authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n\n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n        }\n\n        authCodeResponse.nonce = cachedNonce || undefined;\n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Remove throttle if it exists\n        if (clientId) {\n            ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest.authority, this.authCodeRequest.scopes);\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}