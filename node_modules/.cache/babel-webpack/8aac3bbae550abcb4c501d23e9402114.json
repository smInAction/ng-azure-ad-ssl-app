{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { PromptValue, Separators, GrantType, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { AccountEntity } from '../cache/entities/AccountEntity.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\n\nvar AuthorizationCodeClient =\n/** @class */\nfunction (_super) {\n  __extends(AuthorizationCodeClient, _super);\n\n  function AuthorizationCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_a) {\n        queryString = this.createAuthCodeUrlQueryString(request);\n        return [2\n        /*return*/\n        , UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n\n            if (!request || StringUtils.isEmpty(request.code)) {\n              throw ClientAuthError.createTokenRequestCannotBeMadeError();\n            }\n\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(this.authority, request)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n\n\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null); // Deserialize hash fragment response parameters.\n\n    var hashUrlString = new UrlString(hashFragment); // Deserialize hash fragment response parameters.\n\n    var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash()); // Get code response\n\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils); // throw when there is no auth code in the response\n\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n\n\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n\n    if (logoutRequest.account) {\n      // Clear given account.\n      this.cacheManager.removeAccount(AccountEntity.generateAccountCacheKey(logoutRequest.account));\n    } else {\n      // Clear all accounts and tokens\n      this.cacheManager.clear();\n    }\n\n    var queryString = this.createLogoutUrlQueryString(logoutRequest); // Construct logout URI.\n\n    return StringUtils.isEmpty(queryString) ? this.authority.endSessionEndpoint : this.authority.endSessionEndpoint + \"?\" + queryString;\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes\n            };\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            ccsCredential = undefined;\n\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId, ccsCred, clientInfo, clientInfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId); // validate the redirectUri (to be a non null value)\n\n            parameterBuilder.addRedirectUri(request.redirectUri); // Add scope array, parameter builder will add default scopes and dedupe\n\n            parameterBuilder.addScopes(request.scopes); // add code: user set, not validated\n\n            parameterBuilder.addAuthorizationCode(request.code); // Add library metadata\n\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            } // add code_verifier if passed\n\n\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            cnfString = _a.sent();\n            parameterBuilder.addPopToken(cnfString);\n            _a.label = 2;\n\n          case 2:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            ccsCred = undefined;\n\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            } // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n\n\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n    var requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n\n    parameterBuilder.addScopes(requestScopes); // validate the redirectUri (to be a non null value)\n\n    parameterBuilder.addRedirectUri(request.redirectUri); // generate the correlationId if not set by the user and add\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId); // add response_mode. If not passed in it defaults to query.\n\n    parameterBuilder.addResponseMode(request.responseMode); // add response_type = code\n\n    parameterBuilder.addResponseTypeCode(); // add library info parameters\n\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo); // add client_info=1\n\n    parameterBuilder.addClientInfo();\n\n    if (request.codeChallenge && request.codeChallengeMethod) {\n      parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n    }\n\n    if (request.prompt) {\n      parameterBuilder.addPrompt(request.prompt);\n    }\n\n    if (request.domainHint) {\n      parameterBuilder.addDomainHint(request.domainHint);\n    } // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object\n\n\n    if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n      // AAD will throw if prompt=select_account is passed with an account hint\n      if (request.sid && request.prompt === PromptValue.NONE) {\n        // SessionID is only used in silent calls\n        this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n        parameterBuilder.addSid(request.sid);\n      } else if (request.account) {\n        var accountSid = this.extractAccountSid(request.account); // If account and loginHint are provided, we will check account first for sid before adding loginHint\n\n        if (accountSid && request.prompt === PromptValue.NONE) {\n          // SessionId is only used in silent calls\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n          parameterBuilder.addSid(accountSid);\n\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n        } else if (request.loginHint) {\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n          parameterBuilder.addLoginHint(request.loginHint);\n          parameterBuilder.addCcsUpn(request.loginHint);\n        } else if (request.account.username) {\n          // Fallback to account username if provided\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n          parameterBuilder.addLoginHint(request.account.username);\n\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n        }\n      } else if (request.loginHint) {\n        this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n        parameterBuilder.addLoginHint(request.loginHint);\n        parameterBuilder.addCcsUpn(request.loginHint);\n      }\n    } else {\n      this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n    }\n\n    if (request.nonce) {\n      parameterBuilder.addNonce(request.nonce);\n    }\n\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n\n    if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n\n\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    if (account.idTokenClaims) {\n      var tokenClaims = account.idTokenClaims;\n      return tokenClaims.sid || null;\n    }\n\n    return null;\n  };\n\n  return AuthorizationCodeClient;\n}(BaseClient);\n\nexport { AuthorizationCodeClient };","map":{"version":3,"sources":["../../src/client/AuthorizationCodeClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, PromptValue, Separators } from \"../utils/Constants\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { UrlString } from \"../url/UrlString\";\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { TokenClaims } from \"../account/TokenClaims\";\nimport { AccountInfo } from \"../account/AccountInfo\";\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from \"../account/ClientInfo\";\nimport { CcsCredentialType, CcsCredential } from \"../account/CcsCredential\";\n\n/**\n * Oauth2.0 Authorization Code client\n */\nexport class AuthorizationCodeClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\n     * application. The URL target the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * acquireToken(AuthorizationCodeRequest)\n     * @param request\n     */\n    async getAuthCodeUrl(request: CommonAuthorizationUrlRequest): Promise<string> {\n        const queryString = this.createAuthCodeUrlQueryString(request);\n\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n\n    /**\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n     * authorization_code_grant\n     * @param request\n     */\n    async acquireToken(request: CommonAuthorizationCodeRequest, authCodePayload?: AuthorizationCodePayload): Promise<AuthenticationResult> {\n        this.logger.info(\"in acquireToken call\");\n        if (!request || StringUtils.isEmpty(request.code)) {\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\n        }\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return await responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload);\n    }\n\n    /**\n     * Handles the hash fragment response from public client code request. Returns a code response used by\n     * the client to exchange for a token in acquireToken.\n     * @param hashFragment\n     */\n    handleFragmentResponse(hashFragment: string, cachedState: string): AuthorizationCodePayload {\n        // Handle responses.\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n\n        // Deserialize hash fragment response parameters.\n        const hashUrlString = new UrlString(hashFragment);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hashUrlString.getHash());\n\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\n        }\n        return {\n            ...serverParams,\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n            code: serverParams.code\n        };\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param authorityUri\n     */\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\n        }\n\n        if (logoutRequest.account) {\n            // Clear given account.\n            this.cacheManager.removeAccount(AccountEntity.generateAccountCacheKey(logoutRequest.account));\n        } else {\n            // Clear all accounts and tokens\n            this.cacheManager.clear();\n        }\n\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n\n        // Construct logout URI.\n        return StringUtils.isEmpty(queryString) ? this.authority.endSessionEndpoint : `${this.authority.endSessionEndpoint}?${queryString}`;\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonAuthorizationCodeRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes\n        };\n\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        let ccsCredential: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        const headers: Record<string, string> = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n        const endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : `${authority.tokenEndpoint}?${queryParameters}`;\n\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request \n     */\n    private createTokenQueryParameters(request: CommonAuthorizationCodeRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonAuthorizationCodeRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes);\n\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const cnfString = await popTokenGenerator.generateCnf(request);\n            parameterBuilder.addPopToken(cnfString);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        \n        let ccsCred: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        } else {\n            ccsCred = request.ccsCredential;\n        }\n\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n     * @param request\n     */\n    private createAuthCodeUrlQueryString(request: CommonAuthorizationUrlRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        const requestScopes = [...request.scopes || [], ...request.extraScopesToConsent || []];\n        parameterBuilder.addScopes(requestScopes);\n\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n\n        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            } else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                // If account and loginHint are provided, we will check account first for sid before adding loginHint\n                if (accountSid && request.prompt === PromptValue.NONE) {\n                    // SessionId is only used in silent calls\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                } else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +  e);\n                    }\n                }\n            } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        } else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `EndSessionRequest` and creates a URL\n     * @param request\n     */\n    private createLogoutUrlQueryString(request: CommonEndSessionRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n     * @param account \n     */\n    private extractAccountSid(account: AccountInfo): string | null {\n        if (account.idTokenClaims) {\n            const tokenClaims = account.idTokenClaims as TokenClaims;\n            return tokenClaims.sid || null;\n        }\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}