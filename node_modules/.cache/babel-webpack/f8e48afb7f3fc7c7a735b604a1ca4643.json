{"ast":null,"code":"/*! @azure/msal-browser v2.15.0 2021-06-29 */\n'use strict';\n\nimport { Constants, UrlString } from '@azure/msal-common';\nimport { FetchClient } from '../network/FetchClient.js';\nimport { XhrClient } from '../network/XhrClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType, BrowserConstants } from './BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Utility class for browser specific functions\r\n */\n\nvar BrowserUtils =\n/** @class */\nfunction () {\n  function BrowserUtils() {} // #region Window Navigation and URL management\n\n  /**\r\n   * Clears hash from window url.\r\n   */\n\n\n  BrowserUtils.clearHash = function (contentWindow) {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = Constants.EMPTY_STRING;\n\n    if (typeof contentWindow.history.replaceState === \"function\") {\n      // Full removes \"#\" from url\n      contentWindow.history.replaceState(null, Constants.EMPTY_STRING, \"\" + contentWindow.location.pathname + contentWindow.location.search);\n    }\n  };\n  /**\r\n   * Replaces current hash with hash from provided url\r\n   */\n\n\n  BrowserUtils.replaceHash = function (url) {\n    var urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n  };\n  /**\r\n   * Returns boolean of whether the current window is in an iframe or not.\r\n   */\n\n\n  BrowserUtils.isInIframe = function () {\n    return window.parent !== window;\n  }; // #endregion\n\n  /**\r\n   * Returns current window URL as redirect uri\r\n   */\n\n\n  BrowserUtils.getCurrentUri = function () {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n  };\n  /**\r\n   * Gets the homepage url for the current window location.\r\n   */\n\n\n  BrowserUtils.getHomepage = function () {\n    var currentUrl = new UrlString(window.location.href);\n    var urlComponents = currentUrl.getUrlComponents();\n    return urlComponents.Protocol + \"//\" + urlComponents.HostNameAndPort + \"/\";\n  };\n  /**\r\n   * Returns best compatible network client object.\r\n   */\n\n\n  BrowserUtils.getBrowserNetworkClient = function () {\n    if (window.fetch && window.Headers) {\n      return new FetchClient();\n    } else {\n      return new XhrClient();\n    }\n  };\n  /**\r\n   * Throws error if we have completed an auth and are\r\n   * attempting another auth request inside an iframe.\r\n   */\n\n\n  BrowserUtils.blockReloadInHiddenIframes = function () {\n    var isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash); // return an error if called from the hidden iframe created by the msal js silent calls\n\n    if (isResponseHash && BrowserUtils.isInIframe()) {\n      throw BrowserAuthError.createBlockReloadInHiddenIframeError();\n    }\n  };\n  /**\r\n   * Block redirect operations in iframes unless explicitly allowed\r\n   * @param interactionType Interaction type for the request\r\n   * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n   */\n\n\n  BrowserUtils.blockRedirectInIframe = function (interactionType, allowRedirectInIframe) {\n    var isIframedApp = BrowserUtils.isInIframe();\n\n    if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n      // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n      throw BrowserAuthError.createRedirectInIframeError(isIframedApp);\n    }\n  };\n  /**\r\n   * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n   */\n\n\n  BrowserUtils.blockAcquireTokenInPopups = function () {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(BrowserConstants.POPUP_NAME_PREFIX + \".\") === 0) {\n      throw BrowserAuthError.createBlockAcquireTokenInPopupsError();\n    }\n  };\n  /**\r\n   * Throws error if token requests are made in non-browser environment\r\n   * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n   */\n\n\n  BrowserUtils.blockNonBrowserEnvironment = function (isBrowserEnvironment) {\n    if (!isBrowserEnvironment) {\n      throw BrowserAuthError.createNonBrowserEnvironmentError();\n    }\n  };\n  /**\r\n   * Returns boolean of whether current browser is an Internet Explorer or Edge browser.\r\n   */\n\n\n  BrowserUtils.detectIEOrEdge = function () {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    var msie11 = ua.indexOf(\"Trident/\");\n    var msedge = ua.indexOf(\"Edge/\");\n    var isIE = msie > 0 || msie11 > 0;\n    var isEdge = msedge > 0;\n    return isIE || isEdge;\n  };\n\n  return BrowserUtils;\n}();\n\nexport { BrowserUtils };","map":{"version":3,"sources":["../../src/utils/BrowserUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants, INetworkModule, UrlString } from \"@azure/msal-common\";\nimport { FetchClient } from \"../network/FetchClient\";\nimport { XhrClient } from \"../network/XhrClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, BrowserConstants } from \"./BrowserConstants\";\n\n/**\n * Utility class for browser specific functions\n */\nexport class BrowserUtils {\n\n    // #region Window Navigation and URL management\n\n    /**\n     * Clears hash from window url.\n     */\n    static clearHash(contentWindow: Window): void {\n        // Office.js sets history.replaceState to null\n        contentWindow.location.hash = Constants.EMPTY_STRING;\n        if (typeof contentWindow.history.replaceState === \"function\") {\n            // Full removes \"#\" from url\n            contentWindow.history.replaceState(null, Constants.EMPTY_STRING, `${contentWindow.location.pathname}${contentWindow.location.search}`);\n        }\n    }\n\n    /**\n     * Replaces current hash with hash from provided url\n     */\n    static replaceHash(url: string): void {\n        const urlParts = url.split(\"#\");\n        urlParts.shift(); // Remove part before the hash\n        window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n    }\n\n    /**\n     * Returns boolean of whether the current window is in an iframe or not.\n     */\n    static isInIframe(): boolean {\n        return window.parent !== window;\n    }\n\n    // #endregion\n\n    /**\n     * Returns current window URL as redirect uri\n     */\n    static getCurrentUri(): string {\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\n    }\n\n    /**\n     * Gets the homepage url for the current window location.\n     */\n    static getHomepage(): string {\n        const currentUrl = new UrlString(window.location.href);\n        const urlComponents = currentUrl.getUrlComponents();\n        return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n    }\n\n    /**\n     * Returns best compatible network client object. \n     */\n    static getBrowserNetworkClient(): INetworkModule {\n        if (window.fetch && window.Headers) {\n            return new FetchClient();\n        } else {\n            return new XhrClient();\n        }\n    }\n\n    /**\n     * Throws error if we have completed an auth and are \n     * attempting another auth request inside an iframe.\n     */\n    static blockReloadInHiddenIframes(): void {\n        const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n        // return an error if called from the hidden iframe created by the msal js silent calls\n        if (isResponseHash && BrowserUtils.isInIframe()) {\n            throw BrowserAuthError.createBlockReloadInHiddenIframeError();\n        }\n    }\n\n    /**\n     * Block redirect operations in iframes unless explicitly allowed\n     * @param interactionType Interaction type for the request\n     * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n     */\n    static blockRedirectInIframe(interactionType: InteractionType, allowRedirectInIframe: boolean): void {\n        const isIframedApp = BrowserUtils.isInIframe();\n        if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n            // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n            throw BrowserAuthError.createRedirectInIframeError(isIframedApp);\n        }\n    }\n\n    /**\n     * Block redirectUri loaded in popup from calling AcquireToken APIs\n     */\n    static blockAcquireTokenInPopups(): void {\n        // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n        if (window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0) {\n            throw BrowserAuthError.createBlockAcquireTokenInPopupsError();\n        }\n    }\n\n    /**\n     * Throws error if token requests are made in non-browser environment\n     * @param isBrowserEnvironment Flag indicating if environment is a browser.\n     */\n    static blockNonBrowserEnvironment(isBrowserEnvironment: boolean): void {\n        if (!isBrowserEnvironment) {\n            throw BrowserAuthError.createNonBrowserEnvironmentError();\n        }\n    }\n\n    /**\n     * Returns boolean of whether current browser is an Internet Explorer or Edge browser.\n     */\n    static detectIEOrEdge(): boolean {\n        const ua = window.navigator.userAgent;\n        const msie = ua.indexOf(\"MSIE \");\n        const msie11 = ua.indexOf(\"Trident/\");\n        const msedge = ua.indexOf(\"Edge/\");\n        const isIE = msie > 0 || msie11 > 0;\n        const isEdge = msedge > 0;\n        return isIE || isEdge;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}