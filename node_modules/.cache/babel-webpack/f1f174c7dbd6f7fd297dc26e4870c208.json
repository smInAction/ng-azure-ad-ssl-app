{"ast":null,"code":"/*! @azure/msal-browser v2.15.0 2021-06-29 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, Constants, UrlString } from '@azure/msal-common';\nimport { InteractionHandler } from './InteractionHandler.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from '../config/Configuration.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentHandler =\n/** @class */\nfunction (_super) {\n  __extends(SilentHandler, _super);\n\n  function SilentHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, navigateFrameWait) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;\n\n    _this.navigateFrameWait = navigateFrameWait;\n    return _this;\n  }\n  /**\r\n   * Creates a hidden iframe to given URL using user-requested scopes as an id.\r\n   * @param urlNavigate\r\n   * @param userRequestScopes\r\n   */\n\n\n  SilentHandler.prototype.initiateAuthRequest = function (requestUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (StringUtils.isEmpty(requestUrl)) {\n              // Throw error if request URL is empty.\n              this.browserRequestLogger.info(\"Navigate url is empty\");\n              throw BrowserAuthError.createEmptyNavigationUriError();\n            }\n\n            if (!this.navigateFrameWait) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.loadFrame(requestUrl)];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = this.loadFrameSync(requestUrl);\n            _b.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , _a];\n        }\n      });\n    });\n  };\n  /**\r\n   * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\r\n   * @param iframe\r\n   * @param timeout\r\n   */\n\n\n  SilentHandler.prototype.monitorIframeForHash = function (iframe, timeout) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n        _this.browserRequestLogger.warning(\"system.loadFrameTimeout or system.iframeHashTimeout set to lower (\" + timeout + \"ms) than the default (\" + DEFAULT_IFRAME_TIMEOUT_MS + \"ms). This may result in timeouts.\");\n      }\n      /*\r\n       * Polling for iframes can be purely timing based,\r\n       * since we don't need to account for interaction.\r\n       */\n\n\n      var nowMark = window.performance.now();\n      var timeoutMark = nowMark + timeout;\n      var intervalId = setInterval(function () {\n        if (window.performance.now() > timeoutMark) {\n          _this.removeHiddenIframe(iframe);\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createMonitorIframeTimeoutError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n        var contentWindow = iframe.contentWindow;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = contentWindow ? contentWindow.location.href : Constants.EMPTY_STRING;\n        } catch (e) {}\n\n        if (StringUtils.isEmpty(href)) {\n          return;\n        }\n\n        var contentHash = contentWindow ? contentWindow.location.hash : Constants.EMPTY_STRING;\n\n        if (UrlString.hashContainsKnownProperties(contentHash)) {\n          // Success case\n          _this.removeHiddenIframe(iframe);\n\n          clearInterval(intervalId);\n          resolve(contentHash);\n          return;\n        }\n      }, BrowserConstants.POLL_INTERVAL_MS);\n    });\n  };\n  /**\r\n   * @hidden\r\n   * Loads iframe with authorization endpoint URL\r\n   * @ignore\r\n   */\n\n\n  SilentHandler.prototype.loadFrame = function (urlNavigate) {\n    /*\r\n     * This trick overcomes iframe navigation in IE\r\n     * IE does not load the page consistently in iframe\r\n     */\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var frameHandle = _this.createHiddenIframe();\n\n      setTimeout(function () {\n        if (!frameHandle) {\n          reject(\"Unable to load iframe\");\n          return;\n        }\n\n        frameHandle.src = urlNavigate;\n        resolve(frameHandle);\n      }, _this.navigateFrameWait);\n    });\n  };\n  /**\r\n   * @hidden\r\n   * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\r\n   * @param urlNavigate\r\n   * @param frameName\r\n   * @param logger\r\n   */\n\n\n  SilentHandler.prototype.loadFrameSync = function (urlNavigate) {\n    var frameHandle = this.createHiddenIframe();\n    frameHandle.src = urlNavigate;\n    return frameHandle;\n  };\n  /**\r\n   * @hidden\r\n   * Creates a new hidden iframe or gets an existing one for silent token renewal.\r\n   * @ignore\r\n   */\n\n\n  SilentHandler.prototype.createHiddenIframe = function () {\n    var authFrame = document.createElement(\"iframe\");\n    authFrame.style.visibility = \"hidden\";\n    authFrame.style.position = \"absolute\";\n    authFrame.style.width = authFrame.style.height = \"0\";\n    authFrame.style.border = \"0\";\n    authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n    document.getElementsByTagName(\"body\")[0].appendChild(authFrame);\n    return authFrame;\n  };\n  /**\r\n   * @hidden\r\n   * Removes a hidden iframe from the page.\r\n   * @ignore\r\n   */\n\n\n  SilentHandler.prototype.removeHiddenIframe = function (iframe) {\n    if (document.body === iframe.parentNode) {\n      document.body.removeChild(iframe);\n    }\n  };\n\n  return SilentHandler;\n}(InteractionHandler);\n\nexport { SilentHandler };","map":{"version":3,"sources":["../../src/interaction_handler/SilentHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { UrlString, StringUtils, CommonAuthorizationCodeRequest, AuthorizationCodeClient, Constants, Logger } from \"@azure/msal-common\";\nimport { InteractionHandler } from \"./InteractionHandler\";\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from \"../config/Configuration\";\n\nexport class SilentHandler extends InteractionHandler {\n\n    private navigateFrameWait: number;\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger, navigateFrameWait: number) {\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\n        this.navigateFrameWait = navigateFrameWait;\n    }\n\n    /**\n     * Creates a hidden iframe to given URL using user-requested scopes as an id.\n     * @param urlNavigate\n     * @param userRequestScopes\n     */\n    async initiateAuthRequest(requestUrl: string): Promise<HTMLIFrameElement> {\n        if (StringUtils.isEmpty(requestUrl)) {\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.info(\"Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n\n        return this.navigateFrameWait ? await this.loadFrame(requestUrl) : this.loadFrameSync(requestUrl);\n    }\n\n    /**\n     * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\n     * @param iframe\n     * @param timeout\n     */\n    monitorIframeForHash(iframe: HTMLIFrameElement, timeout: number): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n                this.browserRequestLogger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`);\n            }\n\n            /*\n             * Polling for iframes can be purely timing based,\n             * since we don't need to account for interaction.\n             */\n            const nowMark = window.performance.now();\n            const timeoutMark = nowMark + timeout;\n\n            const intervalId = setInterval(() => {\n                if (window.performance.now() > timeoutMark) {\n                    this.removeHiddenIframe(iframe);\n                    clearInterval(intervalId);\n                    reject(BrowserAuthError.createMonitorIframeTimeoutError());\n                    return;\n                }\n\n                let href: string = Constants.EMPTY_STRING;\n                const contentWindow = iframe.contentWindow;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = contentWindow ? contentWindow.location.href : Constants.EMPTY_STRING;\n                } catch (e) {}\n\n                if (StringUtils.isEmpty(href)) {\n                    return;\n                }\n\n                const contentHash = contentWindow ? contentWindow.location.hash: Constants.EMPTY_STRING;\n                if (UrlString.hashContainsKnownProperties(contentHash)) {\n                    // Success case\n                    this.removeHiddenIframe(iframe);\n                    clearInterval(intervalId);\n                    resolve(contentHash);\n                    return;\n                }\n            }, BrowserConstants.POLL_INTERVAL_MS);\n        });\n    }\n\n    /**\n     * @hidden\n     * Loads iframe with authorization endpoint URL\n     * @ignore\n     */\n    private loadFrame(urlNavigate: string): Promise<HTMLIFrameElement> {\n        /*\n         * This trick overcomes iframe navigation in IE\n         * IE does not load the page consistently in iframe\n         */\n\n        return new Promise((resolve, reject) => {\n            const frameHandle = this.createHiddenIframe();\n\n            setTimeout(() => {\n                if (!frameHandle) {\n                    reject(\"Unable to load iframe\");\n                    return;\n                }\n\n                frameHandle.src = urlNavigate;\n\n                resolve(frameHandle);\n            }, this.navigateFrameWait);\n        });\n    }\n\n    /**\n     * @hidden\n     * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\n     * @param urlNavigate\n     * @param frameName\n     * @param logger\n     */\n    private loadFrameSync(urlNavigate: string): HTMLIFrameElement{\n        const frameHandle = this.createHiddenIframe();\n\n        frameHandle.src = urlNavigate;\n\n        return frameHandle;\n    }\n\n    /**\n     * @hidden\n     * Creates a new hidden iframe or gets an existing one for silent token renewal.\n     * @ignore\n     */\n    private createHiddenIframe(): HTMLIFrameElement {\n        const authFrame = document.createElement(\"iframe\");\n\n        authFrame.style.visibility = \"hidden\";\n        authFrame.style.position = \"absolute\";\n        authFrame.style.width = authFrame.style.height = \"0\";\n        authFrame.style.border = \"0\";\n        authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n        document.getElementsByTagName(\"body\")[0].appendChild(authFrame);\n\n        return authFrame;\n    }\n\n    /**\n     * @hidden\n     * Removes a hidden iframe from the page.\n     * @ignore\n     */\n    private removeHiddenIframe(iframe: HTMLIFrameElement): void {\n        if (document.body === iframe.parentNode) {\n            document.body.removeChild(iframe);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}