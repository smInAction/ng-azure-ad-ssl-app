{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * @hidden\r\n */\n\nvar StringUtils =\n/** @class */\nfunction () {\n  function StringUtils() {}\n  /**\r\n   * decode a JWT\r\n   *\r\n   * @param authToken\r\n   */\n\n\n  StringUtils.decodeAuthToken = function (authToken) {\n    if (StringUtils.isEmpty(authToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n    }\n\n    var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    var matches = tokenPartsRegex.exec(authToken);\n\n    if (!matches || matches.length < 4) {\n      throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\n    }\n\n    var crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  };\n  /**\r\n   * Check if a string is empty.\r\n   *\r\n   * @param str\r\n   */\n\n\n  StringUtils.isEmpty = function (str) {\n    return typeof str === \"undefined\" || !str || 0 === str.length;\n  };\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n\n\n  StringUtils.isEmptyObj = function (strObj) {\n    if (strObj && !StringUtils.isEmpty(strObj)) {\n      try {\n        var obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n\n    return true;\n  };\n\n  StringUtils.startsWith = function (str, search) {\n    return str.indexOf(search) === 0;\n  };\n\n  StringUtils.endsWith = function (str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  };\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n\n\n  StringUtils.queryStringToObject = function (query) {\n    var match; // Regex for replacing addition symbol with a space\n\n    var pl = /\\+/g;\n    var search = /([^&=]+)=([^&]*)/g;\n\n    var decode = function decode(s) {\n      return decodeURIComponent(decodeURIComponent(s.replace(pl, \" \")));\n    };\n\n    var obj = {};\n    match = search.exec(query);\n\n    while (match) {\n      obj[decode(match[1])] = decode(match[2]);\n      match = search.exec(query);\n    }\n\n    return obj;\n  };\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n\n\n  StringUtils.trimArrayEntries = function (arr) {\n    return arr.map(function (entry) {\n      return entry.trim();\n    });\n  };\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n\n\n  StringUtils.removeEmptyStringsFromArray = function (arr) {\n    return arr.filter(function (entry) {\n      return !StringUtils.isEmpty(entry);\n    });\n  };\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n\n\n  StringUtils.jsonParseHelper = function (str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n\n\n  StringUtils.matchPattern = function (pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    var regex = new RegExp(pattern.replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\"));\n    return regex.test(input);\n  };\n\n  return StringUtils;\n}();\n\nexport { StringUtils };","map":{"version":3,"sources":["../../src/utils/StringUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { DecodedAuthToken } from \"../account/DecodedAuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * @hidden\n */\nexport class StringUtils {\n\n    /**\n     * decode a JWT\n     *\n     * @param authToken\n     */\n    static decodeAuthToken(authToken: string): DecodedAuthToken {\n        if (StringUtils.isEmpty(authToken)) {\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n        }\n        const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n        const matches = tokenPartsRegex.exec(authToken);\n        if (!matches || matches.length < 4) {\n            throw ClientAuthError.createTokenParsingError(`Given token is malformed: ${JSON.stringify(authToken)}`);\n        }\n        const crackedToken: DecodedAuthToken = {\n            header: matches[1],\n            JWSPayload: matches[2],\n            JWSSig: matches[3]\n        };\n        return crackedToken;\n    }\n\n    /**\n     * Check if a string is empty.\n     *\n     * @param str\n     */\n    static isEmpty(str?: string): boolean {\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\n    }\n\n    /**\n     * Check if stringified object is empty\n     * @param strObj \n     */\n    static isEmptyObj(strObj?: string): boolean {\n        if (strObj && !StringUtils.isEmpty(strObj)) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            } catch (e) {}\n        }\n        return true;\n    }\n\n    static startsWith(str: string, search: string): boolean {\n        return str.indexOf(search) === 0;\n    }\n\n    static endsWith(str: string, search: string): boolean {\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\n    }\n\n    /**\n     * Parses string into an object.\n     *\n     * @param query\n     */\n    static queryStringToObject<T>(query: string): T {\n        let match: Array<string> | null; // Regex for replacing addition symbol with a space\n        const pl = /\\+/g;\n        const search = /([^&=]+)=([^&]*)/g;\n        const decode = (s: string): string => decodeURIComponent(decodeURIComponent(s.replace(pl, \" \")));\n        const obj: {} = {};\n        match = search.exec(query);\n        while (match) {\n            obj[decode(match[1])] = decode(match[2]);\n            match = search.exec(query);\n        }\n        return obj as T;\n    }\n\n    /**\n     * Trims entries in an array.\n     *\n     * @param arr\n     */\n    static trimArrayEntries(arr: Array<string>): Array<string> {\n        return arr.map(entry => entry.trim());\n    }\n\n    /**\n     * Removes empty strings from array\n     * @param arr\n     */\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string> {\n        return arr.filter(entry => {\n            return !StringUtils.isEmpty(entry);\n        });\n    }\n\n    /**\n     * Attempts to parse a string into JSON\n     * @param str\n     */\n    static jsonParseHelper<T>(str: string): T | null {\n        try {\n            return JSON.parse(str) as T;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n     * @param input String to match against\n     */\n    static matchPattern(pattern: string, input: string): boolean {\n        /**\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n         */\n        const regex: RegExp = new RegExp(pattern.replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\"));\n\n        return regex.test(input);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}