{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { StringUtils } from './StringUtils.js';\nimport { Constants } from './Constants.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\n\nvar ProtocolUtils =\n/** @class */\nfunction () {\n  function ProtocolUtils() {}\n  /**\r\n   * Appends user state with random guid, or returns random guid.\r\n   * @param userState\r\n   * @param randomGuid\r\n   */\n\n\n  ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {\n    var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n    return !StringUtils.isEmpty(userState) ? \"\" + libraryState + Constants.RESOURCE_DELIM + userState : libraryState;\n  };\n  /**\r\n   * Generates the state value used by the common library.\r\n   * @param randomGuid\r\n   * @param cryptoObj\r\n   */\n\n\n  ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {\n    if (!cryptoObj) {\n      throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\n    } // Create a state object containing a unique id and the timestamp of the request creation\n\n\n    var stateObj = {\n      id: cryptoObj.createNewGuid()\n    };\n\n    if (meta) {\n      stateObj.meta = meta;\n    }\n\n    var stateString = JSON.stringify(stateObj);\n    return cryptoObj.base64Encode(stateString);\n  };\n  /**\r\n   * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n   * @param state\r\n   * @param cryptoObj\r\n   */\n\n\n  ProtocolUtils.parseRequestState = function (cryptoObj, state) {\n    if (!cryptoObj) {\n      throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\n    }\n\n    if (StringUtils.isEmpty(state)) {\n      throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\n    }\n\n    try {\n      // Split the state between library state and user passed state and decode them separately\n      var splitState = decodeURIComponent(state).split(Constants.RESOURCE_DELIM);\n      var libraryState = splitState[0];\n      var userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : \"\";\n      var libraryStateString = cryptoObj.base64Decode(libraryState);\n      var libraryStateObj = JSON.parse(libraryStateString);\n      return {\n        userRequestState: !StringUtils.isEmpty(userState) ? userState : \"\",\n        libraryState: libraryStateObj\n      };\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  };\n\n  return ProtocolUtils;\n}();\n\nexport { ProtocolUtils };","map":{"version":3,"sources":["../../src/utils/ProtocolUtils.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;AA8BA;;;;;;;AAGA,WAAA,aAAA,GAAA,CAiEC;;;;;;;;AA1DU,EAAA,aAAA,CAAA,eAAA,GAAP,UAAuB,SAAvB,EAA2C,SAA3C,EAA+D,IAA/D,EAA4F;AACxF,QAAM,YAAY,GAAG,aAAa,CAAC,oBAAd,CAAmC,SAAnC,EAA8C,IAA9C,CAArB;AACA,WAAO,CAAC,WAAW,CAAC,OAAZ,CAAoB,SAApB,CAAD,GAAkC,KAAG,YAAH,GAAkB,SAAS,CAAC,cAA5B,GAA6C,SAA/E,GAA6F,YAApG;AACH,GAHM;;;;;;;;AAUA,EAAA,aAAA,CAAA,oBAAA,GAAP,UAA4B,SAA5B,EAAgD,IAAhD,EAA6E;AACzE,QAAI,CAAC,SAAL,EAAgB;AACZ,YAAM,eAAe,CAAC,yBAAhB,CAA0C,sBAA1C,CAAN;AACH,KAHwE,C;;;AAMzE,QAAM,QAAQ,GAAuB;AACjC,MAAA,EAAE,EAAE,SAAS,CAAC,aAAV;AAD6B,KAArC;;AAIA,QAAI,IAAJ,EAAU;AACN,MAAA,QAAQ,CAAC,IAAT,GAAgB,IAAhB;AACH;;AAED,QAAM,WAAW,GAAG,IAAI,CAAC,SAAL,CAAe,QAAf,CAApB;AAEA,WAAO,SAAS,CAAC,YAAV,CAAuB,WAAvB,CAAP;AACH,GAjBM;;;;;;;;AAwBA,EAAA,aAAA,CAAA,iBAAA,GAAP,UAAyB,SAAzB,EAA6C,KAA7C,EAA0D;AACtD,QAAI,CAAC,SAAL,EAAgB;AACZ,YAAM,eAAe,CAAC,yBAAhB,CAA0C,mBAA1C,CAAN;AACH;;AAED,QAAI,WAAW,CAAC,OAAZ,CAAoB,KAApB,CAAJ,EAAgC;AAC5B,YAAM,eAAe,CAAC,uBAAhB,CAAwC,KAAxC,EAA+C,gCAA/C,CAAN;AACH;;AAED,QAAI;;AAEA,UAAM,UAAU,GAAG,kBAAkB,CAAC,KAAD,CAAlB,CAA0B,KAA1B,CAAgC,SAAS,CAAC,cAA1C,CAAnB;AACA,UAAM,YAAY,GAAG,UAAU,CAAC,CAAD,CAA/B;AACA,UAAM,SAAS,GAAG,UAAU,CAAC,MAAX,GAAoB,CAApB,GAAwB,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,IAApB,CAAyB,SAAS,CAAC,cAAnC,CAAxB,GAA6E,EAA/F;AACA,UAAM,kBAAkB,GAAG,SAAS,CAAC,YAAV,CAAuB,YAAvB,CAA3B;AACA,UAAM,eAAe,GAAG,IAAI,CAAC,KAAL,CAAW,kBAAX,CAAxB;AACA,aAAO;AACH,QAAA,gBAAgB,EAAE,CAAC,WAAW,CAAC,OAAZ,CAAoB,SAApB,CAAD,GAAkC,SAAlC,GAA8C,EAD7D;AAEH,QAAA,YAAY,EAAE;AAFX,OAAP;AAIH,KAXD,CAWE,OAAM,CAAN,EAAS;AACP,YAAM,eAAe,CAAC,uBAAhB,CAAwC,KAAxC,EAA+C,CAA/C,CAAN;AACH;AACJ,GAvBM;;AAwBX,SAAA,aAAA;AAAC,C","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"./StringUtils\";\nimport { Constants } from \"./Constants\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * Type which defines the object that is stringified, encoded and sent in the state value.\n * Contains the following:\n * - id - unique identifier for this request\n * - ts - timestamp for the time the request was made. Used to ensure that token expiration is not calculated incorrectly.\n * - platformState - string value sent from the platform.\n */\nexport type LibraryStateObject = {\n    id: string,\n    meta?: Record<string, string>\n};\n\n/**\n * Type which defines the stringified and encoded object sent to the service in the authorize request.\n */\nexport type RequestStateObject = {\n    userRequestState: string,\n    libraryState: LibraryStateObject\n};\n\n/**\n * Class which provides helpers for OAuth 2.0 protocol specific values\n */\nexport class ProtocolUtils {\n\n    /**\n     * Appends user state with random guid, or returns random guid.\n     * @param userState \n     * @param randomGuid \n     */\n    static setRequestState(cryptoObj: ICrypto, userState?: string, meta?: Record<string, string>): string {\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n        return !StringUtils.isEmpty(userState) ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}` : libraryState;\n    }\n\n    /**\n     * Generates the state value used by the common library.\n     * @param randomGuid \n     * @param cryptoObj \n     */\n    static generateLibraryState(cryptoObj: ICrypto, meta?: Record<string, string>): string {\n        if (!cryptoObj) {\n            throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\n        }\n\n        // Create a state object containing a unique id and the timestamp of the request creation\n        const stateObj: LibraryStateObject = {\n            id: cryptoObj.createNewGuid()\n        };\n\n        if (meta) {\n            stateObj.meta = meta;\n        }\n\n        const stateString = JSON.stringify(stateObj);\n\n        return cryptoObj.base64Encode(stateString);\n    }\n\n    /**\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\n     * @param state \n     * @param cryptoObj \n     */\n    static parseRequestState(cryptoObj: ICrypto, state: string): RequestStateObject {\n        if (!cryptoObj) {\n            throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\n        }\n\n        if (StringUtils.isEmpty(state)) {\n            throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\n        }\n\n        try {\n            // Split the state between library state and user passed state and decode them separately\n            const splitState = decodeURIComponent(state).split(Constants.RESOURCE_DELIM);\n            const libraryState = splitState[0];\n            const userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : \"\";\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\n            const libraryStateObj = JSON.parse(libraryStateString) as LibraryStateObject;\n            return {\n                userRequestState: !StringUtils.isEmpty(userState) ? userState : \"\",\n                libraryState: libraryStateObj\n            };\n        } catch(e) {\n            throw ClientAuthError.createInvalidStateError(state, e);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}