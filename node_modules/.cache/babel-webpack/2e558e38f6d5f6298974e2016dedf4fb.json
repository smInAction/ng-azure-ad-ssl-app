{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { __assign, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { LogLevel } from '../logger/Logger.js';\nimport { Constants } from '../utils/Constants.js';\nimport { version } from '../packageMetadata.js';\nimport { DefaultStorageClass } from '../cache/CacheManager.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Token renewal offset default in seconds\n\nvar DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nvar DEFAULT_SYSTEM_OPTIONS = {\n  tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n  preventCorsPreflight: false\n};\nvar DEFAULT_LOGGER_IMPLEMENTATION = {\n  loggerCallback: function loggerCallback() {// allow users to not set loggerCallback\n  },\n  piiLoggingEnabled: false,\n  logLevel: LogLevel.Info,\n  correlationId: \"\"\n};\nvar DEFAULT_NETWORK_IMPLEMENTATION = {\n  sendGetRequestAsync: function sendGetRequestAsync() {\n    return __awaiter(this, void 0, void 0, function () {\n      var notImplErr;\n      return __generator(this, function (_a) {\n        notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n      });\n    });\n  },\n  sendPostRequestAsync: function sendPostRequestAsync() {\n    return __awaiter(this, void 0, void 0, function () {\n      var notImplErr;\n      return __generator(this, function (_a) {\n        notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n      });\n    });\n  }\n};\nvar DEFAULT_LIBRARY_INFO = {\n  sku: Constants.SKU,\n  version: version,\n  cpu: \"\",\n  os: \"\"\n};\nvar DEFAULT_CLIENT_CREDENTIALS = {\n  clientSecret: \"\",\n  clientAssertion: undefined\n};\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\n\nfunction buildClientConfiguration(_a) {\n  var userAuthOptions = _a.authOptions,\n      userSystemOptions = _a.systemOptions,\n      userLoggerOption = _a.loggerOptions,\n      storageImplementation = _a.storageInterface,\n      networkImplementation = _a.networkInterface,\n      cryptoImplementation = _a.cryptoInterface,\n      clientCredentials = _a.clientCredentials,\n      libraryInfo = _a.libraryInfo,\n      serverTelemetryManager = _a.serverTelemetryManager,\n      persistencePlugin = _a.persistencePlugin,\n      serializableCache = _a.serializableCache;\n  return {\n    authOptions: buildAuthOptions(userAuthOptions),\n    systemOptions: __assign(__assign({}, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),\n    loggerOptions: __assign(__assign({}, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption),\n    storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION),\n    networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n    cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n    clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n    libraryInfo: __assign(__assign({}, DEFAULT_LIBRARY_INFO), libraryInfo),\n    serverTelemetryManager: serverTelemetryManager || null,\n    persistencePlugin: persistencePlugin || null,\n    serializableCache: serializableCache || null\n  };\n}\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\n\n\nfunction buildAuthOptions(authOptions) {\n  return __assign({\n    clientCapabilities: []\n  }, authOptions);\n}\n\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration };","map":{"version":3,"sources":["../../src/config/ClientConfiguration.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;AAiBA;;AACA,IAAM,gCAAgC,GAAG,GAAzC;IAyGa,sBAAsB,GAA4B;AAC3D,EAAA,yBAAyB,EAAE,gCADgC;AAE3D,EAAA,oBAAoB,EAAE;AAFqC,C;AAK/D,IAAM,6BAA6B,GAA4B;AAC3D,EAAA,cAAc,EAAE,0BAAA,C;AAEf,GAH0D;AAI3D,EAAA,iBAAiB,EAAE,KAJwC;AAK3D,EAAA,QAAQ,EAAE,QAAQ,CAAC,IALwC;AAM3D,EAAA,aAAa,EAAE;AAN4C,CAA/D;AASA,IAAM,8BAA8B,GAAmB;AAC7C,EAAA,mBAAmB,EAAzB,+BAAA;;;;AACU,QAAA,UAAU,GAAG,oEAAb;AACN,cAAM,SAAS,CAAC,qBAAV,CAAgC,UAAhC,CAAN;;;AACH,GAJkD;AAK7C,EAAA,oBAAoB,EAA1B,gCAAA;;;;AACU,QAAA,UAAU,GAAG,qEAAb;AACN,cAAM,SAAS,CAAC,qBAAV,CAAgC,UAAhC,CAAN;;;AACH;AARkD,CAAvD;AAWA,IAAM,oBAAoB,GAAgB;AACtC,EAAA,GAAG,EAAE,SAAS,CAAC,GADuB;AAEtC,EAAA,OAAO,EAAE,OAF6B;AAGtC,EAAA,GAAG,EAAE,EAHiC;AAItC,EAAA,EAAE,EAAE;AAJkC,CAA1C;AAOA,IAAM,0BAA0B,GAAsB;AAClD,EAAA,YAAY,EAAE,EADoC;AAElD,EAAA,eAAe,EAAE;AAFiC,CAAtD;AAKA;;;;;;;;SAOgB,wB,CACZ,E,EAYsB;MAXL,eAAe,GAAA,EAAA,CAAA,W;MACb,iBAAiB,GAAA,EAAA,CAAA,a;MACjB,gBAAgB,GAAA,EAAA,CAAA,a;MACb,qBAAqB,GAAA,EAAA,CAAA,gB;MACrB,qBAAqB,GAAA,EAAA,CAAA,gB;MACtB,oBAAoB,GAAA,EAAA,CAAA,e;MAClB,iBAAiB,GAAA,EAAA,CAAA,iB;MACvB,WAAW,GAAA,EAAA,CAAA,W;MACA,sBAAsB,GAAA,EAAA,CAAA,sB;MAC3B,iBAAiB,GAAA,EAAA,CAAA,iB;MACjB,iBAAiB,GAAA,EAAA,CAAA,iB;AAGxC,SAAO;AACH,IAAA,WAAW,EAAE,gBAAgB,CAAC,eAAD,CAD1B;AAEH,IAAA,aAAa,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,sBAAP,CAAA,EAAkC,iBAAlC,CAFV;AAGH,IAAA,aAAa,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,6BAAP,CAAA,EAAyC,gBAAzC,CAHV;AAIH,IAAA,gBAAgB,EAAE,qBAAqB,IAAI,IAAI,mBAAJ,CAAwB,eAAe,CAAC,QAAxC,EAAkD,6BAAlD,CAJxC;AAKH,IAAA,gBAAgB,EAAE,qBAAqB,IAAI,8BALxC;AAMH,IAAA,eAAe,EAAE,oBAAoB,IAAI,6BANtC;AAOH,IAAA,iBAAiB,EAAE,iBAAiB,IAAI,0BAPrC;AAQH,IAAA,WAAW,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,oBAAP,CAAA,EAAgC,WAAhC,CARR;AASH,IAAA,sBAAsB,EAAE,sBAAsB,IAAI,IAT/C;AAUH,IAAA,iBAAiB,EAAE,iBAAiB,IAAI,IAVrC;AAWH,IAAA,iBAAiB,EAAE,iBAAiB,IAAI;AAXrC,GAAP;AAaH;AAED;;;;;;AAIA,SAAS,gBAAT,CAA0B,WAA1B,EAAkD;AAC9C,SAAA,QAAA,CAAA;AACI,IAAA,kBAAkB,EAAE;AADxB,GAAA,EAEO,WAFP,CAAA;AAIJ","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, ICrypto } from \"../crypto/ICrypto\";\nimport { AuthError } from \"../error/AuthError\";\nimport { ILoggerCallback, LogLevel } from \"../logger/Logger\";\nimport { Constants } from \"../utils/Constants\";\nimport { version } from \"../packageMetadata\";\nimport { Authority } from \"../authority/Authority\";\nimport { CacheManager, DefaultStorageClass } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\n\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n\n/**\n * Use the configuration object to configure MSAL Modules and initialize the base interfaces for MSAL.\n *\n * This object allows you to configure important elements of MSAL functionality:\n * - authOptions                - Authentication for application\n * - cryptoInterface            - Implementation of crypto functions\n * - libraryInfo                - Library metadata\n * - loggerOptions              - Logging for application\n * - networkInterface           - Network implementation\n * - storageInterface           - Storage implementation\n * - systemOptions              - Additional library options\n * - clientCredentials          - Credentials options for confidential clients\n */\nexport type ClientConfiguration = {\n    authOptions: AuthOptions,\n    systemOptions?: SystemOptions,\n    loggerOptions?: LoggerOptions,\n    storageInterface?: CacheManager,\n    networkInterface?: INetworkModule,\n    cryptoInterface?: ICrypto,\n    clientCredentials?: ClientCredentials,\n    libraryInfo?: LibraryInfo\n    serverTelemetryManager?: ServerTelemetryManager | null,\n    persistencePlugin?: ICachePlugin | null,\n    serializableCache?: ISerializableTokenCache | null\n};\n\nexport type CommonClientConfiguration = {\n    authOptions: Required<AuthOptions>,\n    systemOptions: Required<SystemOptions>,\n    loggerOptions : Required<LoggerOptions>,\n    storageInterface: CacheManager,\n    networkInterface : INetworkModule,\n    cryptoInterface : Required<ICrypto>,\n    libraryInfo : LibraryInfo,\n    serverTelemetryManager: ServerTelemetryManager | null,\n    clientCredentials: ClientCredentials,\n    persistencePlugin: ICachePlugin | null,\n    serializableCache: ISerializableTokenCache | null\n};\n\n/**\n * Use this to configure the auth options in the ClientConfiguration object\n *\n * - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\n * - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\n * - knownAuthorities            - An array of URIs that are known to be valid. Used in B2C scenarios.\n * - cloudDiscoveryMetadata      - A string containing the cloud discovery response. Used in AAD scenarios.\n * - clientCapabilities          - Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\n * - protocolMode                - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n */\nexport type AuthOptions = {\n    clientId: string;\n    authority: Authority;\n    clientCapabilities?: Array<string>;\n};\n\n/**\n * Use this to configure token renewal info in the Configuration object\n *\n * - tokenRenewalOffsetSeconds    - Sets the window of offset needed to renew the token before expiry\n */\nexport type SystemOptions = {\n    tokenRenewalOffsetSeconds?: number;\n    preventCorsPreflight?: boolean;\n};\n\n/**\n *  Use this to configure the logging that MSAL does, by configuring logger options in the Configuration object\n *\n * - loggerCallback                - Callback for logger\n * - piiLoggingEnabled             - Sets whether pii logging is enabled\n * - logLevel                      - Sets the level at which logging happens\n * - correlationId                 - Sets the correlationId printed by the logger\n */\nexport type LoggerOptions = {\n    loggerCallback?: ILoggerCallback,\n    piiLoggingEnabled?: boolean,\n    logLevel?: LogLevel,\n    correlationId?: string\n};\n\n/**\n * Library-specific options\n */\nexport type LibraryInfo = {\n    sku: string,\n    version: string,\n    cpu: string,\n    os: string\n};\n\n/**\n * Credentials for confidential clients\n */\nexport type ClientCredentials = {\n    clientSecret?: string,\n    clientAssertion? : {\n        assertion: string,\n        assertionType: string\n    };\n};\n\nexport const DEFAULT_SYSTEM_OPTIONS: Required<SystemOptions> = {\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false\n};\n\nconst DEFAULT_LOGGER_IMPLEMENTATION: Required<LoggerOptions> = {\n    loggerCallback: () => {\n        // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n    correlationId: \"\"\n};\n\nconst DEFAULT_NETWORK_IMPLEMENTATION: INetworkModule = {\n    async sendGetRequestAsync<T>(): Promise<T> {\n        const notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async sendPostRequestAsync<T>(): Promise<T> {\n        const notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n};\n\nconst DEFAULT_LIBRARY_INFO: LibraryInfo = {\n    sku: Constants.SKU,\n    version: version,\n    cpu: \"\",\n    os: \"\"\n};\n\nconst DEFAULT_CLIENT_CREDENTIALS: ClientCredentials = {\n    clientSecret: \"\",\n    clientAssertion: undefined\n};\n\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nexport function buildClientConfiguration(\n    {\n        authOptions: userAuthOptions,\n        systemOptions: userSystemOptions,\n        loggerOptions: userLoggerOption,\n        storageInterface: storageImplementation,\n        networkInterface: networkImplementation,\n        cryptoInterface: cryptoImplementation,\n        clientCredentials: clientCredentials,\n        libraryInfo: libraryInfo,\n        serverTelemetryManager: serverTelemetryManager,\n        persistencePlugin: persistencePlugin,\n        serializableCache: serializableCache\n    }: ClientConfiguration): CommonClientConfiguration {\n\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\n        loggerOptions: { ...DEFAULT_LOGGER_IMPLEMENTATION, ...userLoggerOption },\n        storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION),\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null\n    };\n}\n\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions: AuthOptions): Required<AuthOptions> {\n    return {\n        clientCapabilities: [],\n        ...authOptions\n    };\n}\n"]},"metadata":{},"sourceType":"module"}