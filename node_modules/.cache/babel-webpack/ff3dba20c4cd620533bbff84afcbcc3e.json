{"ast":null,"code":"/*! @azure/msal-browser v2.15.0 2021-06-29 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { DEFAULT_REQUEST, InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { name, version } from '../packageMetadata.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\n\nvar PublicClientApplication =\n/** @class */\nfunction (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n\n\n  function PublicClientApplication(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n\n\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.logger.verbose(\"loginRedirect called\");\n        return [2\n        /*return*/\n        , this.acquireTokenRedirect(request || DEFAULT_REQUEST)];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    this.logger.verbose(\"loginPopup called\");\n    return this.acquireTokenPopup(request || DEFAULT_REQUEST);\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, silentRequest, browserRequestLogger, serverTelemetryManager, silentAuthClient, cachedToken, tokenRenewalResult, tokenRenewalError_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n            this.logger.verbose(\"acquireTokenSilent called\", request.correlationId);\n            account = request.account || this.getActiveAccount();\n\n            if (!account) {\n              throw BrowserAuthError.createNoAccountError();\n            }\n\n            silentRequest = __assign(__assign(__assign({}, request), this.initializeBaseRequest(request)), {\n              account: account,\n              forceRefresh: request.forceRefresh || false\n            });\n            browserRequestLogger = this.logger.clone(name, version, silentRequest.correlationId);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 9]);\n\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow, silentRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.correlationId)];\n\n          case 2:\n            silentAuthClient = _a.sent();\n            browserRequestLogger.verbose(\"Silent auth client created\");\n            return [4\n            /*yield*/\n            , silentAuthClient.acquireCachedToken(silentRequest)];\n\n          case 3:\n            cachedToken = _a.sent();\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, cachedToken);\n            return [2\n            /*return*/\n            , cachedToken];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.acquireTokenByRefreshToken(silentRequest)];\n\n          case 6:\n            tokenRenewalResult = _a.sent();\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\n            return [2\n            /*return*/\n            , tokenRenewalResult];\n\n          case 7:\n            tokenRenewalError_1 = _a.sent();\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError_1);\n            throw tokenRenewalError_1;\n\n          case 8:\n            return [3\n            /*break*/\n            , 9];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return PublicClientApplication;\n}(ClientApplication);\n\nexport { PublicClientApplication };","map":{"version":3,"sources":["../../src/app/PublicClientApplication.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, CommonSilentFlowRequest } from \"@azure/msal-common\";\nimport { Configuration } from \"../config/Configuration\";\nimport { DEFAULT_REQUEST, ApiId, InteractionType } from \"../utils/BrowserConstants\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { ClientApplication } from \"./ClientApplication\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { version, name } from \"../packageMetadata\";\n\n/**\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\n */\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\n\n    /**\n     * @constructor\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration object for the MSAL PublicClientApplication instance\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n    }\n\n    /**\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\n     * any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\n        this.logger.verbose(\"loginRedirect called\");\n        return this.acquireTokenRedirect(request || DEFAULT_REQUEST);\n    }\n\n    /**\n     * Use when initiating the login process via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\n        this.logger.verbose(\"loginPopup called\");\n        return this.acquireTokenPopup(request || DEFAULT_REQUEST);\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\n     *\n     * @param {@link (SilentRequest:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\n     */\n    async acquireTokenSilent(request: SilentRequest): Promise<AuthenticationResult> {\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", request.correlationId);\n        const account = request.account || this.getActiveAccount();\n        if (!account) {\n            throw BrowserAuthError.createNoAccountError();\n        }\n        const silentRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            account: account,\n            forceRefresh: request.forceRefresh || false\n        };\n        const browserRequestLogger = this.logger.clone(name, version, silentRequest.correlationId);\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n        try {\n            // Telemetry manager only used to increment cacheHits here\n            const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow, silentRequest.correlationId);\n            const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.correlationId);\n            browserRequestLogger.verbose(\"Silent auth client created\");\n            const cachedToken = await silentAuthClient.acquireCachedToken(silentRequest);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, cachedToken);\n            return cachedToken;\n        } catch (e) {\n            try {\n                const tokenRenewalResult = await this.acquireTokenByRefreshToken(silentRequest);\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\n                return tokenRenewalResult;\n            } catch (tokenRenewalError) {\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n                throw tokenRenewalError;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}