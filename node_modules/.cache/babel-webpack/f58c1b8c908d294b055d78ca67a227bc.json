{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { CredentialType, GrantType, AADServerParamKeys, Constants } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * On-Behalf-Of client\r\n */\n\nvar OnBehalfOfClient =\n/** @class */\nfunction (_super) {\n  __extends(OnBehalfOfClient, _super);\n\n  function OnBehalfOfClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire tokens with on behalf of flow\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3\n            /*break*/\n            , 4];\n            return [2\n            /*return*/\n            , cachedAuthenticationResult];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * look up cache for tokens\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n\n            if (!cachedAccessToken || TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            cachedIdToken = this.readIdTokenFromCache(request);\n            cachedAccount = null;\n\n            if (cachedIdToken) {\n              idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n              localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n              accountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || \"\"\n              };\n              cachedAccount = this.readAccountFromCache(accountInfo);\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: cachedAccount,\n              accessToken: cachedAccessToken,\n              idToken: cachedIdToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request, idTokenObject)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * read access token from cache TODO: CacheManager API should be used here\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: this.scopeSet.printScopesLowerCase()\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    var numAccessTokens = accessTokens.length;\n\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * read idtoken from cache TODO: CacheManager API should be used here instead\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readIdTokenFromCache = function (request) {\n    var idTokenFilter = {\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      oboAssertion: request.oboAssertion\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\n    var idTokens = Object.keys(credentialCache.idTokens).map(function (key) {\n      return credentialCache.idTokens[key];\n    }); // When acquiring a token on behalf of an application, there might not be an id token in the cache\n\n    if (idTokens.length < 1) {\n      return null;\n    }\n\n    return idTokens[0];\n  };\n  /**\r\n   * read account from cache, TODO: CacheManager API should be used here instead\r\n   * @param account\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccountFromCache = function (account) {\n    return this.cacheManager.readAccountFromCache(account);\n  };\n  /**\r\n   * Make a network call to the server requesting credentials\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\n\n          case 2:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate a server request in accepable format\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n    parameterBuilder.addOboAssertion(request.oboAssertion);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return OnBehalfOfClient;\n}(BaseClient);\n\nexport { OnBehalfOfClient };","map":{"version":3,"sources":["../../src/client/OnBehalfOfClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { GrantType, AADServerParamKeys , CredentialType, Constants } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { CommonOnBehalfOfRequest } from \"../request/CommonOnBehalfOfRequest\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AccountInfo } from \"../account/AccountInfo\";\n\n/**\n * On-Behalf-Of client\n */\nexport class OnBehalfOfClient extends BaseClient {\n\n    private scopeSet: ScopeSet;\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Public API to acquire tokens with on behalf of flow\n     * @param request\n     */\n    public async acquireToken(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\n        this.scopeSet = new ScopeSet(request.scopes || []);\n\n        if (request.skipCache) {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\n        if (cachedAuthenticationResult) {\n            return cachedAuthenticationResult;\n        } else {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n    }\n\n    /**\n     * look up cache for tokens\n     * @param request\n     */\n    private async getCachedAuthenticationResult(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\n        const cachedAccessToken = this.readAccessTokenFromCache();\n        if (!cachedAccessToken ||\n            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            return null;\n        }\n\n        const cachedIdToken = this.readIdTokenFromCache(request);\n        let idTokenObject: AuthToken | undefined;\n        let cachedAccount: AccountEntity | null = null;\n        if (cachedIdToken) {\n            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n            const localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n            const accountInfo: AccountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || \"\"\n            };\n\n            cachedAccount = this.readAccountFromCache(accountInfo);\n        }\n\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            {\n                account: cachedAccount,\n                accessToken: cachedAccessToken,\n                idToken: cachedIdToken,\n                refreshToken: null,\n                appMetadata: null\n            },\n            true,\n            request,\n            idTokenObject);\n    }\n\n    /**\n     * read access token from cache TODO: CacheManager API should be used here\n     * @param request\n     */\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\n        const accessTokenFilter: CredentialFilter = {\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ACCESS_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant,\n            target: this.scopeSet.printScopesLowerCase(),\n        };\n\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n        const accessTokens = Object.keys(credentialCache.accessTokens).map(key => credentialCache.accessTokens[key]);\n\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            return null;\n        } else if (numAccessTokens > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * read idtoken from cache TODO: CacheManager API should be used here instead\n     * @param request\n     */\n    private readIdTokenFromCache(request: CommonOnBehalfOfRequest): IdTokenEntity | null {\n        const idTokenFilter: CredentialFilter = {\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ID_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant,\n            oboAssertion: request.oboAssertion\n        };\n\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\n        const idTokens = Object.keys(credentialCache.idTokens).map(key => credentialCache.idTokens[key]);\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\n        if (idTokens.length < 1) {\n            return null;\n        }\n        return idTokens[0] as IdTokenEntity;\n    }\n\n    /**\n     * read account from cache, TODO: CacheManager API should be used here instead\n     * @param account\n     */\n    private readAccountFromCache(account: AccountInfo): AccountEntity | null {\n        return this.cacheManager.readAccountFromCache(account);\n    }\n\n    /**\n     * Make a network call to the server requesting credentials\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonOnBehalfOfRequest, authority: Authority)\n        : Promise<AuthenticationResult | null> {\n\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes\n        };\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request\n        );\n\n        return tokenResponse;\n    }\n\n    /**\n     * generate a server request in accepable format\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonOnBehalfOfRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n\n        parameterBuilder.addOboAssertion(request.oboAssertion);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}