{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar KeyLocation;\n\n(function (KeyLocation) {\n  KeyLocation[\"SW\"] = \"sw\";\n  KeyLocation[\"UHW\"] = \"uhw\";\n})(KeyLocation || (KeyLocation = {}));\n\nvar PopTokenGenerator =\n/** @class */\nfunction () {\n  function PopTokenGenerator(cryptoUtils) {\n    this.cryptoUtils = cryptoUtils;\n  }\n\n  PopTokenGenerator.prototype.generateCnf = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var kidThumbprint, reqCnf;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cryptoUtils.getPublicKeyThumbprint(request)];\n\n          case 1:\n            kidThumbprint = _a.sent();\n            reqCnf = {\n              kid: kidThumbprint,\n              xms_ksl: KeyLocation.SW\n            };\n            return [2\n            /*return*/\n            , this.cryptoUtils.base64Encode(JSON.stringify(reqCnf))];\n        }\n      });\n    });\n  };\n\n  PopTokenGenerator.prototype.signPopToken = function (accessToken, request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenClaims, resourceRequestMethod, resourceRequestUri, shrClaims, resourceUrlString, resourceUrlComponents;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            tokenClaims = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);\n            resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims;\n            resourceUrlString = resourceRequestUri ? new UrlString(resourceRequestUri) : undefined;\n            resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();\n\n            if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {\n              throw ClientAuthError.createTokenClaimsRequiredError();\n            }\n\n            return [4\n            /*yield*/\n            , this.cryptoUtils.signJwt({\n              at: accessToken,\n              ts: TimeUtils.nowSeconds(),\n              m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),\n              u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,\n              nonce: this.cryptoUtils.createNewGuid(),\n              p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,\n              q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n              client_claims: shrClaims || undefined\n            }, tokenClaims.cnf.kid)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  return PopTokenGenerator;\n}();\n\nexport { PopTokenGenerator };","map":{"version":3,"sources":["../../src/crypto/PopTokenGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto } from \"./ICrypto\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { TokenClaims } from \"../account/TokenClaims\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/**\n * See eSTS docs for more info.\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\n *      - sw: software storage\n *      - uhw: hardware storage\n */\ntype ReqCnf = {\n    kid: string;\n    xms_ksl: KeyLocation;\n};\n\nenum KeyLocation {\n    SW = \"sw\",\n    UHW = \"uhw\"\n}\n\nexport class PopTokenGenerator {\n\n    private cryptoUtils: ICrypto;\n\n    constructor(cryptoUtils: ICrypto) {\n        this.cryptoUtils = cryptoUtils;\n    }\n\n    async generateCnf(request: BaseAuthRequest): Promise<string> {\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n        const reqCnf: ReqCnf = {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW\n        };\n        return this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n    }\n\n    async signPopToken(accessToken: string, request: BaseAuthRequest): Promise<string> {\n        const tokenClaims: TokenClaims | null = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);\n\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims } = request;\n\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n\n        if (!tokenClaims?.cnf?.kid) {\n            throw ClientAuthError.createTokenClaimsRequiredError();\n        }\n\n        return await this.cryptoUtils.signJwt({\n            at: accessToken,\n            ts: TimeUtils.nowSeconds(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n            client_claims: shrClaims || undefined\n        }, tokenClaims.cnf.kid);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}