{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientInfo } from '../account/ClientInfo.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AccountEntity } from '../cache/entities/AccountEntity.js';\nimport { AuthorityType } from '../authority/AuthorityType.js';\nimport { IdTokenEntity } from '../cache/entities/IdTokenEntity.js';\nimport { AccessTokenEntity } from '../cache/entities/AccessTokenEntity.js';\nimport { RefreshTokenEntity } from '../cache/entities/RefreshTokenEntity.js';\nimport { InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.js';\nimport { CacheRecord } from '../cache/entities/CacheRecord.js';\nimport { ProtocolUtils } from '../utils/ProtocolUtils.js';\nimport { Constants, AuthenticationScheme, THE_FAMILY_ID } from '../utils/Constants.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { AppMetadataEntity } from '../cache/entities/AppMetadataEntity.js';\nimport { TokenCacheContext } from '../cache/persistence/TokenCacheContext.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Class that handles response parsing.\r\n */\n\nvar ResponseHandler =\n/** @class */\nfunction () {\n  function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {\n    this.clientId = clientId;\n    this.cacheStorage = cacheStorage;\n    this.cryptoObj = cryptoObj;\n    this.logger = logger;\n    this.serializableCache = serializableCache;\n    this.persistencePlugin = persistencePlugin;\n  }\n  /**\r\n   * Function which validates server authorization code response.\r\n   * @param serverResponseHash\r\n   * @param cachedState\r\n   * @param cryptoObj\r\n   */\n\n\n  ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {\n    if (!serverResponseHash.state || !cachedState) {\n      throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\n    }\n\n    if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\n      throw ClientAuthError.createStateMismatchError();\n    } // Check for error\n\n\n    if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\n      if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n      }\n\n      throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n    }\n\n    if (serverResponseHash.client_info) {\n      buildClientInfo(serverResponseHash.client_info, cryptoObj);\n    }\n  };\n  /**\r\n   * Function which validates server authorization token response.\r\n   * @param serverResponse\r\n   */\n\n\n  ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {\n    // Check for error\n    if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n      if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\n      }\n\n      var errString = serverResponse.error_codes + \" - [\" + serverResponse.timestamp + \"]: \" + serverResponse.error_description + \" - Correlation ID: \" + serverResponse.correlation_id + \" - Trace ID: \" + serverResponse.trace_id;\n      throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\n    }\n  };\n  /**\r\n   * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n   * @param serverTokenResponse\r\n   * @param authority\r\n   */\n\n\n  ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, authCodePayload, oboAssertion, handlingRefreshTokenResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (serverTokenResponse.id_token) {\n              idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj); // token nonce check (TODO: Add a warning if no nonce is given?)\n\n              if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\n                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\n                  throw ClientAuthError.createNonceMismatchError();\n                }\n              }\n            } // generate homeAccountId\n\n\n            this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\n\n            if (!!authCodePayload && !!authCodePayload.state) {\n              requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n            }\n\n            cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, idTokenObj, request.scopes, oboAssertion, authCodePayload);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 4, 7]);\n\n            if (!(this.persistencePlugin && this.serializableCache)) return [3\n            /*break*/\n            , 3];\n            this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n            cacheContext = new TokenCacheContext(this.serializableCache, true);\n            return [4\n            /*yield*/\n            , this.persistencePlugin.beforeCacheAccess(cacheContext)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.\r\n             */\n            if (handlingRefreshTokenResponse && cacheRecord.account) {\n              key = cacheRecord.account.generateAccountKey();\n              account = this.cacheStorage.getAccount(key);\n\n              if (!account) {\n                this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                return [2\n                /*return*/\n                , ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];\n              }\n            }\n\n            this.cacheStorage.saveCacheRecord(cacheRecord);\n            return [3\n            /*break*/\n            , 7];\n\n          case 4:\n            if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3\n            /*break*/\n            , 6];\n            this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n            return [4\n            /*yield*/\n            , this.persistencePlugin.afterCacheAccess(cacheContext)];\n\n          case 5:\n            _a.sent();\n\n            _a.label = 6;\n\n          case 6:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates CacheRecord\r\n   * @param serverTokenResponse\r\n   * @param idTokenObj\r\n   * @param authority\r\n   */\n\n\n  ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, reqTimestamp, idTokenObj, requestScopes, oboAssertion, authCodePayload) {\n    var env = authority.getPreferredCache();\n\n    if (StringUtils.isEmpty(env)) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    } // IdToken: non AAD scenarios can have empty realm\n\n\n    var cachedIdToken;\n    var cachedAccount;\n\n    if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\n      cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || Constants.EMPTY_STRING, oboAssertion);\n      cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion, authCodePayload);\n    } // AccessToken\n\n\n    var cachedAccessToken = null;\n\n    if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\n      // If scopes not returned in server response, use request scopes\n      var responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(requestScopes || []);\n      /*\r\n       * Use timestamp calculated before request\r\n       * Server may return timestamps as strings, parse to numbers if so.\r\n       */\n\n      var expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n      var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n      var refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n      var tokenExpirationSeconds = reqTimestamp + expiresIn;\n      var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n      var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined; // non AAD scenarios can have empty realm\n\n      cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, oboAssertion);\n    } // refreshToken\n\n\n    var cachedRefreshToken = null;\n\n    if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\n      cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, oboAssertion);\n    } // appMetadata\n\n\n    var cachedAppMetadata = null;\n\n    if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\n      cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n    }\n\n    return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n  };\n  /**\r\n   * Generate Account\r\n   * @param serverTokenResponse\r\n   * @param idToken\r\n   * @param authority\r\n   */\n\n\n  ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, oboAssertion, authCodePayload) {\n    var authorityType = authority.authorityType;\n    var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : \"\";\n    var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : \"\"; // ADFS does not require client_info in the response\n\n    if (authorityType === AuthorityType.Adfs) {\n      this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\n      return AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\n    } // This fallback applies to B2C as well as they fall under an AAD account type.\n\n\n    if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\n      throw ClientAuthError.createClientInfoEmptyError();\n    }\n\n    return serverTokenResponse.client_info ? AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, authority, idToken, oboAssertion, cloudGraphHostName, msGraphhost) : AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\n  };\n  /**\r\n   * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n   *\r\n   * Optionally takes a state string that is set as-is in the response.\r\n   *\r\n   * @param cacheRecord\r\n   * @param idTokenObj\r\n   * @param fromTokenCache\r\n   * @param stateString\r\n   */\n\n\n  ResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState) {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, uid, tid;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            accessToken = \"\";\n            responseScopes = [];\n            expiresOn = null;\n            familyId = Constants.EMPTY_STRING;\n            if (!cacheRecord.accessToken) return [3\n            /*break*/\n            , 4];\n            if (!(cacheRecord.accessToken.tokenType === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(cryptoObj);\n            return [4\n            /*yield*/\n            , popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request)];\n\n          case 1:\n            accessToken = _d.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            accessToken = cacheRecord.accessToken.secret;\n            _d.label = 3;\n\n          case 3:\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n            _d.label = 4;\n\n          case 4:\n            if (cacheRecord.appMetadata) {\n              familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\n            }\n\n            uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\n            tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\n            return [2\n            /*return*/\n            , {\n              authority: authority.canonicalAuthority,\n              uniqueId: uid,\n              tenantId: tid,\n              scopes: responseScopes,\n              account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\n              idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n              idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n              accessToken: accessToken,\n              fromCache: fromTokenCache,\n              expiresOn: expiresOn,\n              extExpiresOn: extExpiresOn,\n              familyId: familyId,\n              tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\n              state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n              cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\n              msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING\n            }];\n        }\n      });\n    });\n  };\n\n  return ResponseHandler;\n}();\n\nexport { ResponseHandler };","map":{"version":3,"sources":["../../src/response/ResponseHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAmCA;;;;;;;AAYI,WAAA,eAAA,CAAY,QAAZ,EAA8B,YAA9B,EAA0D,SAA1D,EAA8E,MAA9E,EAA8F,iBAA9F,EAAiJ,iBAAjJ,EAAuL;AACnL,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,iBAAL,GAAyB,iBAAzB;AACA,SAAK,iBAAL,GAAyB,iBAAzB;AACH;;;;;;;;;AAQD,EAAA,eAAA,CAAA,SAAA,CAAA,uCAAA,GAAA,UAAwC,kBAAxC,EAA6F,WAA7F,EAAkH,SAAlH,EAAoI;AAEhI,QAAI,CAAC,kBAAkB,CAAC,KAApB,IAA6B,CAAC,WAAlC,EAA+C;AAC3C,YAAM,CAAC,kBAAkB,CAAC,KAApB,GAA4B,eAAe,CAAC,wBAAhB,CAAyC,cAAzC,CAA5B,GAAuF,eAAe,CAAC,wBAAhB,CAAyC,cAAzC,CAA7F;AACH;;AAED,QAAI,kBAAkB,CAAC,kBAAkB,CAAC,KAApB,CAAlB,KAAiD,kBAAkB,CAAC,WAAD,CAAvE,EAAsF;AAClF,YAAM,eAAe,CAAC,wBAAhB,EAAN;AACH,KAR+H,C;;;AAWhI,QAAI,kBAAkB,CAAC,KAAnB,IAA4B,kBAAkB,CAAC,iBAA/C,IAAoE,kBAAkB,CAAC,QAA3F,EAAqG;AACjG,UAAI,4BAA4B,CAAC,0BAA7B,CAAwD,kBAAkB,CAAC,KAA3E,EAAkF,kBAAkB,CAAC,iBAArG,EAAwH,kBAAkB,CAAC,QAA3I,CAAJ,EAA0J;AACtJ,cAAM,IAAI,4BAAJ,CAAiC,kBAAkB,CAAC,KAAnB,IAA4B,SAAS,CAAC,YAAvE,EAAqF,kBAAkB,CAAC,iBAAxG,EAA2H,kBAAkB,CAAC,QAA9I,CAAN;AACH;;AAED,YAAM,IAAI,WAAJ,CAAgB,kBAAkB,CAAC,KAAnB,IAA4B,SAAS,CAAC,YAAtD,EAAoE,kBAAkB,CAAC,iBAAvF,EAA0G,kBAAkB,CAAC,QAA7H,CAAN;AACH;;AAED,QAAI,kBAAkB,CAAC,WAAvB,EAAoC;AAChC,MAAA,eAAe,CAAC,kBAAkB,CAAC,WAApB,EAAiC,SAAjC,CAAf;AACH;AACJ,GAtBD;;;;;;;AA4BA,EAAA,eAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,UAAsB,cAAtB,EAAsE;;AAElE,QAAI,cAAc,CAAC,KAAf,IAAwB,cAAc,CAAC,iBAAvC,IAA4D,cAAc,CAAC,QAA/E,EAAyF;AACrF,UAAI,4BAA4B,CAAC,0BAA7B,CAAwD,cAAc,CAAC,KAAvE,EAA8E,cAAc,CAAC,iBAA7F,EAAgH,cAAc,CAAC,QAA/H,CAAJ,EAA8I;AAC1I,cAAM,IAAI,4BAAJ,CAAiC,cAAc,CAAC,KAAhD,EAAuD,cAAc,CAAC,iBAAtE,EAAyF,cAAc,CAAC,QAAxG,CAAN;AACH;;AAED,UAAM,SAAS,GAAM,cAAc,CAAC,WAAf,GAA0B,MAA1B,GAAiC,cAAc,CAAC,SAAhD,GAAyD,KAAzD,GAA+D,cAAc,CAAC,iBAA9E,GAA+F,qBAA/F,GAAqH,cAAc,CAAC,cAApI,GAAkJ,eAAlJ,GAAkK,cAAc,CAAC,QAAtM;AACA,YAAM,IAAI,WAAJ,CAAgB,cAAc,CAAC,KAA/B,EAAsC,SAAtC,EAAiD,cAAc,CAAC,QAAhE,CAAN;AACH;AACJ,GAVD;;;;;;;;AAiBM,EAAA,eAAA,CAAA,SAAA,CAAA,yBAAA,GAAN,UACI,mBADJ,EAEI,SAFJ,EAGI,YAHJ,EAII,OAJJ,EAKI,eALJ,EAMI,YANJ,EAOI,4BAPJ,EAO0C;;;;;;AAItC,gBAAI,mBAAmB,CAAC,QAAxB,EAAkC;AAC9B,cAAA,UAAU,GAAG,IAAI,SAAJ,CAAc,mBAAmB,CAAC,QAApB,IAAgC,SAAS,CAAC,YAAxD,EAAsE,KAAK,SAA3E,CAAb,CAD8B,C;;AAI9B,kBAAI,eAAe,IAAI,CAAC,WAAW,CAAC,OAAZ,CAAoB,eAAe,CAAC,KAApC,CAAxB,EAAoE;AAChE,oBAAI,UAAU,CAAC,MAAX,CAAkB,KAAlB,KAA4B,eAAe,CAAC,KAAhD,EAAuD;AACnD,wBAAM,eAAe,CAAC,wBAAhB,EAAN;AACH;AACJ;AACJ,a;;;AAGD,iBAAK,qBAAL,GAA6B,aAAa,CAAC,qBAAd,CAAoC,mBAAmB,CAAC,WAApB,IAAmC,SAAS,CAAC,YAAjF,EAA+F,SAAS,CAAC,aAAzG,EAAwH,KAAK,MAA7H,EAAqI,KAAK,SAA1I,EAAqJ,UAArJ,CAA7B;;AAIA,gBAAI,CAAC,CAAC,eAAF,IAAqB,CAAC,CAAC,eAAe,CAAC,KAA3C,EAAkD;AAC9C,cAAA,eAAe,GAAG,aAAa,CAAC,iBAAd,CAAgC,KAAK,SAArC,EAAgD,eAAe,CAAC,KAAhE,CAAlB;AACH;;AAEK,YAAA,WAAW,GAAG,KAAK,mBAAL,CAAyB,mBAAzB,EAA8C,SAA9C,EAAyD,YAAzD,EAAuE,UAAvE,EAAmF,OAAO,CAAC,MAA3F,EAAmG,YAAnG,EAAiH,eAAjH,CAAd;;;;;;kBAGE,KAAK,iBAAL,IAA0B,KAAK,iB,GAA/B,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,iBAAK,MAAL,CAAY,OAAZ,CAAoB,gDAApB;AACA,YAAA,YAAY,GAAG,IAAI,iBAAJ,CAAsB,KAAK,iBAA3B,EAA8C,IAA9C,CAAf;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,CAAuB,iBAAvB,CAAyC,YAAzC,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;AAOJ,gBAAI,4BAA4B,IAAI,WAAW,CAAC,OAAhD,EAAyD;AAC/C,cAAA,GAAG,GAAG,WAAW,CAAC,OAAZ,CAAoB,kBAApB,EAAN;AACA,cAAA,OAAO,GAAG,KAAK,YAAL,CAAkB,UAAlB,CAA6B,GAA7B,CAAV;;AACN,kBAAI,CAAC,OAAL,EAAc;AACV,qBAAK,MAAL,CAAY,OAAZ,CAAoB,qGAApB;AACA,uBAAA,CAAA;AAAA;AAAA,kBAAO,eAAe,CAAC,4BAAhB,CAA6C,KAAK,SAAlD,EAA6D,SAA7D,EAAwE,WAAxE,EAAqF,KAArF,EAA4F,OAA5F,EAAqG,UAArG,EAAiH,eAAjH,CAAP,CAAA;AACH;AACJ;;AACD,iBAAK,YAAL,CAAkB,eAAlB,CAAkC,WAAlC;;;;;;kBAEI,KAAK,iBAAL,IAA0B,KAAK,iBAA/B,IAAoD,Y,GAApD,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,iBAAK,MAAL,CAAY,OAAZ,CAAoB,+CAApB;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,CAAuB,gBAAvB,CAAwC,YAAxC,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;AAGR,mBAAA,CAAA;AAAA;AAAA,cAAO,eAAe,CAAC,4BAAhB,CAA6C,KAAK,SAAlD,EAA6D,SAA7D,EAAwE,WAAxE,EAAqF,KAArF,EAA4F,OAA5F,EAAqG,UAArG,EAAiH,eAAjH,CAAP,CAAA;;;;AACH,GA5DK;;;;;;;;;AAoEE,EAAA,eAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UAA4B,mBAA5B,EAAmF,SAAnF,EAAyG,YAAzG,EAA+H,UAA/H,EAAuJ,aAAvJ,EAAiL,YAAjL,EAAwM,eAAxM,EAAkP;AAC9O,QAAM,GAAG,GAAG,SAAS,CAAC,iBAAV,EAAZ;;AACA,QAAI,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAJ,EAA8B;AAC1B,YAAM,eAAe,CAAC,kCAAhB,EAAN;AACH,KAJ6O,C;;;AAO9O,QAAI,aAAJ;AACA,QAAI,aAAJ;;AACA,QAAI,CAAC,WAAW,CAAC,OAAZ,CAAoB,mBAAmB,CAAC,QAAxC,CAAD,IAAsD,CAAC,CAAC,UAA5D,EAAwE;AACpE,MAAA,aAAa,GAAG,aAAa,CAAC,mBAAd,CACZ,KAAK,qBADO,EAEZ,GAFY,EAGZ,mBAAmB,CAAC,QAApB,IAAgC,SAAS,CAAC,YAH9B,EAIZ,KAAK,QAJO,EAKZ,UAAU,CAAC,MAAX,CAAkB,GAAlB,IAAyB,SAAS,CAAC,YALvB,EAMZ,YANY,CAAhB;AASA,MAAA,aAAa,GAAG,KAAK,qBAAL,CACZ,mBADY,EAEZ,UAFY,EAGZ,SAHY,EAIZ,YAJY,EAKZ,eALY,CAAhB;AAOH,KA1B6O,C;;;AA6B9O,QAAI,iBAAiB,GAA6B,IAAlD;;AACA,QAAI,CAAC,WAAW,CAAC,OAAZ,CAAoB,mBAAmB,CAAC,YAAxC,CAAL,EAA4D;;AAGxD,UAAM,cAAc,GAAG,mBAAmB,CAAC,KAApB,GAA4B,QAAQ,CAAC,UAAT,CAAoB,mBAAmB,CAAC,KAAxC,CAA5B,GAA6E,IAAI,QAAJ,CAAa,aAAa,IAAI,EAA9B,CAApG;;;;;;AAMA,UAAM,SAAS,GAAW,CAAC,OAAO,mBAAmB,CAAC,UAA3B,KAA0C,QAA1C,GAAqD,QAAQ,CAAC,mBAAmB,CAAC,UAArB,EAAiC,EAAjC,CAA7D,GAAoG,mBAAmB,CAAC,UAAzH,KAAwI,CAAlK;AACA,UAAM,YAAY,GAAW,CAAC,OAAO,mBAAmB,CAAC,cAA3B,KAA8C,QAA9C,GAAyD,QAAQ,CAAC,mBAAmB,CAAC,cAArB,EAAqC,EAArC,CAAjE,GAA4G,mBAAmB,CAAC,cAAjI,KAAoJ,CAAjL;AACA,UAAM,SAAS,GAAuB,CAAC,OAAO,mBAAmB,CAAC,UAA3B,KAA0C,QAA1C,GAAqD,QAAQ,CAAC,mBAAmB,CAAC,UAArB,EAAiC,EAAjC,CAA7D,GAAoG,mBAAmB,CAAC,UAAzH,KAAwI,SAA9K;AACA,UAAM,sBAAsB,GAAG,YAAY,GAAG,SAA9C;AACA,UAAM,8BAA8B,GAAG,sBAAsB,GAAG,YAAhE;AACA,UAAM,gBAAgB,GAAG,SAAS,IAAI,SAAS,GAAG,CAAzB,GAA6B,YAAY,GAAG,SAA5C,GAAwD,SAAjF,CAdwD,C;;AAiBxD,MAAA,iBAAiB,GAAG,iBAAiB,CAAC,uBAAlB,CAChB,KAAK,qBADW,EAEhB,GAFgB,EAGhB,mBAAmB,CAAC,YAApB,IAAoC,SAAS,CAAC,YAH9B,EAIhB,KAAK,QAJW,EAKhB,UAAU,GAAG,UAAU,CAAC,MAAX,CAAkB,GAAlB,IAAyB,SAAS,CAAC,YAAtC,GAAqD,SAAS,CAAC,MALzD,EAMhB,cAAc,CAAC,WAAf,EANgB,EAOhB,sBAPgB,EAQhB,8BARgB,EAShB,KAAK,SATW,EAUhB,gBAVgB,EAWhB,mBAAmB,CAAC,UAXJ,EAYhB,YAZgB,CAApB;AAcH,KA7D6O,C;;;AAgE9O,QAAI,kBAAkB,GAA8B,IAApD;;AACA,QAAI,CAAC,WAAW,CAAC,OAAZ,CAAoB,mBAAmB,CAAC,aAAxC,CAAL,EAA6D;AACzD,MAAA,kBAAkB,GAAG,kBAAkB,CAAC,wBAAnB,CACjB,KAAK,qBADY,EAEjB,GAFiB,EAGjB,mBAAmB,CAAC,aAApB,IAAqC,SAAS,CAAC,YAH9B,EAIjB,KAAK,QAJY,EAKjB,mBAAmB,CAAC,IALH,EAMjB,YANiB,CAArB;AAQH,KA1E6O,C;;;AA6E9O,QAAI,iBAAiB,GAA6B,IAAlD;;AACA,QAAI,CAAC,WAAW,CAAC,OAAZ,CAAoB,mBAAmB,CAAC,IAAxC,CAAL,EAAoD;AAChD,MAAA,iBAAiB,GAAG,iBAAiB,CAAC,uBAAlB,CAA0C,KAAK,QAA/C,EAAyD,GAAzD,EAA8D,mBAAmB,CAAC,IAAlF,CAApB;AACH;;AAED,WAAO,IAAI,WAAJ,CAAgB,aAAhB,EAA+B,aAA/B,EAA8C,iBAA9C,EAAiE,kBAAjE,EAAqF,iBAArF,CAAP;AACH,GAnFO;;;;;;;;;AA2FA,EAAA,eAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,UAA8B,mBAA9B,EAAqF,OAArF,EAAyG,SAAzG,EAA+H,YAA/H,EAAsJ,eAAtJ,EAAgM;AAC5L,QAAM,aAAa,GAAG,SAAS,CAAC,aAAhC;AACA,QAAM,kBAAkB,GAAG,eAAe,GAAG,eAAe,CAAC,qBAAnB,GAA2C,EAArF;AACA,QAAM,WAAW,GAAG,eAAe,GAAG,eAAe,CAAC,YAAnB,GAAkC,EAArE,CAH4L,C;;AAM5L,QAAI,aAAa,KAAK,aAAa,CAAC,IAApC,EAA0C;AACtC,WAAK,MAAL,CAAY,OAAZ,CAAoB,+CAApB;AACA,aAAO,aAAa,CAAC,oBAAd,CAAmC,SAAnC,EAA8C,KAAK,qBAAnD,EAA0E,OAA1E,EAAmF,YAAnF,EAAiG,kBAAjG,EAAqH,WAArH,CAAP;AACH,KAT2L,C;;;AAY5L,QAAI,WAAW,CAAC,OAAZ,CAAoB,mBAAmB,CAAC,WAAxC,KAAwD,SAAS,CAAC,YAAV,KAA2B,KAAvF,EAA8F;AAC1F,YAAM,eAAe,CAAC,0BAAhB,EAAN;AACH;;AAED,WAAO,mBAAmB,CAAC,WAApB,GACH,aAAa,CAAC,aAAd,CAA4B,mBAAmB,CAAC,WAAhD,EAA6D,KAAK,qBAAlE,EAAyF,SAAzF,EAAoG,OAApG,EAA6G,YAA7G,EAA2H,kBAA3H,EAA+I,WAA/I,CADG,GAEH,aAAa,CAAC,oBAAd,CAAmC,SAAnC,EAA8C,KAAK,qBAAnD,EAA0E,OAA1E,EAAmF,YAAnF,EAAiG,kBAAjG,EAAqH,WAArH,CAFJ;AAGH,GAnBO;;;;;;;;;;;;;AA+BK,EAAA,eAAA,CAAA,4BAAA,GAAb,UACI,SADJ,EAEI,SAFJ,EAGI,WAHJ,EAII,cAJJ,EAKI,OALJ,EAMI,UANJ,EAOI,YAPJ,EAOqC;;;;;;;;AAC7B,YAAA,WAAW,GAAW,EAAtB;AACA,YAAA,cAAc,GAAkB,EAAhC;AACA,YAAA,SAAS,GAAgB,IAAzB;AAEA,YAAA,QAAQ,GAAW,SAAS,CAAC,YAA7B;iBAEA,WAAW,CAAC,W,EAAZ,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;kBACI,WAAW,CAAC,WAAZ,CAAwB,SAAxB,KAAsC,oBAAoB,CAAC,G,GAA3D,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACM,YAAA,iBAAiB,GAAsB,IAAI,iBAAJ,CAAsB,SAAtB,CAAvC;AACQ,mBAAA,CAAA;AAAA;AAAA,cAAM,iBAAiB,CAAC,YAAlB,CAA+B,WAAW,CAAC,WAAZ,CAAwB,MAAvD,EAA+D,OAA/D,CAAN,CAAA;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;;;;;;AAEA,YAAA,WAAW,GAAG,WAAW,CAAC,WAAZ,CAAwB,MAAtC;;;;AAEJ,YAAA,cAAc,GAAG,QAAQ,CAAC,UAAT,CAAoB,WAAW,CAAC,WAAZ,CAAwB,MAA5C,EAAoD,OAApD,EAAjB;AACA,YAAA,SAAS,GAAG,IAAI,IAAJ,CAAS,MAAM,CAAC,WAAW,CAAC,WAAZ,CAAwB,SAAzB,CAAN,GAA4C,IAArD,CAAZ;AACA,YAAA,YAAY,GAAG,IAAI,IAAJ,CAAS,MAAM,CAAC,WAAW,CAAC,WAAZ,CAAwB,iBAAzB,CAAN,GAAoD,IAA7D,CAAf;;;;AAGJ,gBAAI,WAAW,CAAC,WAAhB,EAA6B;AACzB,cAAA,QAAQ,GAAG,WAAW,CAAC,WAAZ,CAAwB,QAAxB,KAAqC,aAArC,GAAqD,aAArD,GAAqE,SAAS,CAAC,YAA1F;AACH;;AACK,YAAA,GAAG,GAAG,CAAA,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,MAAZ,CAAmB,GAAnB,MAA0B,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,MAAZ,CAAmB,GAA7C,KAAoD,SAAS,CAAC,YAApE;AACA,YAAA,GAAG,GAAG,CAAA,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,MAAZ,CAAmB,GAAnB,KAA0B,SAAS,CAAC,YAA1C;AAEN,mBAAA,CAAA;AAAA;AAAA,cAAO;AACH,cAAA,SAAS,EAAE,SAAS,CAAC,kBADlB;AAEH,cAAA,QAAQ,EAAE,GAFP;AAGH,cAAA,QAAQ,EAAE,GAHP;AAIH,cAAA,MAAM,EAAE,cAJL;AAKH,cAAA,OAAO,EAAE,WAAW,CAAC,OAAZ,GAAsB,WAAW,CAAC,OAAZ,CAAoB,cAApB,EAAtB,GAA6D,IALnE;AAMH,cAAA,OAAO,EAAE,UAAU,GAAG,UAAU,CAAC,QAAd,GAAyB,SAAS,CAAC,YANnD;AAOH,cAAA,aAAa,EAAE,UAAU,GAAG,UAAU,CAAC,MAAd,GAAuB,EAP7C;AAQH,cAAA,WAAW,EAAE,WARV;AASH,cAAA,SAAS,EAAE,cATR;AAUH,cAAA,SAAS,EAAE,SAVR;AAWH,cAAA,YAAY,EAAE,YAXX;AAYH,cAAA,QAAQ,EAAE,QAZP;AAaH,cAAA,SAAS,EAAE,CAAA,CAAA,EAAA,GAAA,WAAW,CAAC,WAAZ,MAAuB,IAAvB,IAAuB,EAAA,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAuB,EAAA,CAAE,SAAzB,KAAsC,SAAS,CAAC,YAbxD;AAcH,cAAA,KAAK,EAAE,YAAY,GAAG,YAAY,CAAC,gBAAhB,GAAmC,SAAS,CAAC,YAd7D;AAeH,cAAA,kBAAkB,EAAE,CAAA,CAAA,EAAA,GAAA,WAAW,CAAC,OAAZ,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,kBAArB,KAA2C,SAAS,CAAC,YAftE;AAgBH,cAAA,WAAW,EAAE,CAAA,CAAA,EAAA,GAAA,WAAW,CAAC,OAAZ,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,WAArB,KAAoC,SAAS,CAAC;AAhBxD,aAAP,CAAA;;;;AAkBH,GAlDY;;AAmDjB,SAAA,eAAA;AAAC,C","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationTokenResponse } from \"./ServerAuthorizationTokenResponse\";\nimport { buildClientInfo} from \"../account/ClientInfo\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ServerAuthorizationCodeResponse } from \"./ServerAuthorizationCodeResponse\";\nimport { Logger } from \"../logger/Logger\";\nimport { ServerError } from \"../error/ServerError\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AuthenticationResult } from \"./AuthenticationResult\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { Authority } from \"../authority/Authority\";\nimport { AuthorityType } from \"../authority/AuthorityType\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { RefreshTokenEntity } from \"../cache/entities/RefreshTokenEntity\";\nimport { InteractionRequiredAuthError } from \"../error/InteractionRequiredAuthError\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ProtocolUtils, RequestStateObject } from \"../utils/ProtocolUtils\";\nimport { AuthenticationScheme, Constants, THE_FAMILY_ID } from \"../utils/Constants\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { AppMetadataEntity } from \"../cache/entities/AppMetadataEntity\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { TokenCacheContext } from \"../cache/persistence/TokenCacheContext\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\nimport { AuthorizationCodePayload } from \"./AuthorizationCodePayload\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/**\n * Class that handles response parsing.\n */\nexport class ResponseHandler {\n    private clientId: string;\n    private cacheStorage: CacheManager;\n    private cryptoObj: ICrypto;\n    private logger: Logger;\n    private homeAccountIdentifier: string;\n    private serializableCache: ISerializableTokenCache | null;\n    private persistencePlugin: ICachePlugin | null;\n\n    constructor(clientId: string, cacheStorage: CacheManager, cryptoObj: ICrypto, logger: Logger, serializableCache: ISerializableTokenCache | null, persistencePlugin: ICachePlugin | null) {\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n    }\n\n    /**\n     * Function which validates server authorization code response.\n     * @param serverResponseHash\n     * @param cachedState\n     * @param cryptoObj\n     */\n    validateServerAuthorizationCodeResponse(serverResponseHash: ServerAuthorizationCodeResponse, cachedState: string, cryptoObj: ICrypto): void {\n\n        if (!serverResponseHash.state || !cachedState) {\n            throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\n            throw ClientAuthError.createStateMismatchError();\n        }\n\n        // Check for error\n        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n            }\n\n            throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n        }\n\n        if (serverResponseHash.client_info) {\n            buildClientInfo(serverResponseHash.client_info, cryptoObj);\n        }\n    }\n\n    /**\n     * Function which validates server authorization token response.\n     * @param serverResponse\n     */\n    validateTokenResponse(serverResponse: ServerAuthorizationTokenResponse): void {\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\n            }\n\n            const errString = `${serverResponse.error_codes} - [${serverResponse.timestamp}]: ${serverResponse.error_description} - Correlation ID: ${serverResponse.correlation_id} - Trace ID: ${serverResponse.trace_id}`;\n            throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\n        }\n    }\n\n    /**\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\n     * @param serverTokenResponse\n     * @param authority\n     */\n    async handleServerTokenResponse(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        authCodePayload?: AuthorizationCodePayload,\n        oboAssertion?: string,\n        handlingRefreshTokenResponse?: boolean): Promise<AuthenticationResult> {\n\n        // create an idToken object (not entity)\n        let idTokenObj: AuthToken | undefined;\n        if (serverTokenResponse.id_token) {\n            idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);\n    \n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\n                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\n                    throw ClientAuthError.createNonceMismatchError();\n                }\n            }\n        }\n\n        // generate homeAccountId\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\n\n        // save the response tokens\n        let requestStateObj: RequestStateObject | undefined;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n        }\n\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, idTokenObj, request.scopes, oboAssertion, authCodePayload);\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n                cacheContext = new TokenCacheContext(this.serializableCache, true);\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.\n             */\n            if (handlingRefreshTokenResponse && cacheRecord.account) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key);\n                if (!account) {\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                    return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj);\n                }\n            }\n            this.cacheStorage.saveCacheRecord(cacheRecord);\n        } finally {\n            if (this.persistencePlugin && this.serializableCache && cacheContext) {\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj);\n    }\n\n    /**\n     * Generates CacheRecord\n     * @param serverTokenResponse\n     * @param idTokenObj\n     * @param authority\n     */\n    private generateCacheRecord(serverTokenResponse: ServerAuthorizationTokenResponse, authority: Authority, reqTimestamp: number, idTokenObj?: AuthToken, requestScopes?: string[], oboAssertion?: string, authCodePayload?: AuthorizationCodePayload): CacheRecord {\n        const env = authority.getPreferredCache();\n        if (StringUtils.isEmpty(env)) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken: IdTokenEntity | undefined;\n        let cachedAccount: AccountEntity | undefined;\n        if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\n            cachedIdToken = IdTokenEntity.createIdTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.id_token || Constants.EMPTY_STRING,\n                this.clientId,\n                idTokenObj.claims.tid || Constants.EMPTY_STRING,\n                oboAssertion\n            );\n\n            cachedAccount = this.generateAccountEntity(\n                serverTokenResponse,\n                idTokenObj,\n                authority,\n                oboAssertion,\n                authCodePayload\n            );\n        }\n\n        // AccessToken\n        let cachedAccessToken: AccessTokenEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\n\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(requestScopes || []);\n\n            /*\n             * Use timestamp calculated before request\n             * Server may return timestamps as strings, parse to numbers if so.\n             */\n            const expiresIn: number = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn: number = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn: number | undefined = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.access_token || Constants.EMPTY_STRING,\n                this.clientId,\n                idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant,\n                responseScopes.printScopes(),\n                tokenExpirationSeconds,\n                extendedTokenExpirationSeconds,\n                this.cryptoObj,\n                refreshOnSeconds,\n                serverTokenResponse.token_type,\n                oboAssertion\n            );\n        }\n\n        // refreshToken\n        let cachedRefreshToken: RefreshTokenEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\n            cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.refresh_token || Constants.EMPTY_STRING,\n                this.clientId,\n                serverTokenResponse.foci,\n                oboAssertion\n            );\n        }\n\n        // appMetadata\n        let cachedAppMetadata: AppMetadataEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\n            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n        }\n\n        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n    }\n\n    /**\n     * Generate Account\n     * @param serverTokenResponse\n     * @param idToken\n     * @param authority\n     */\n    private generateAccountEntity(serverTokenResponse: ServerAuthorizationTokenResponse, idToken: AuthToken, authority: Authority, oboAssertion?: string, authCodePayload?: AuthorizationCodePayload): AccountEntity {\n        const authorityType = authority.authorityType;\n        const cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : \"\";\n        const msGraphhost = authCodePayload ? authCodePayload.msgraph_host : \"\";\n\n        // ADFS does not require client_info in the response\n        if (authorityType === AuthorityType.Adfs) {\n            this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\n            return AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\n        }\n\n        // This fallback applies to B2C as well as they fall under an AAD account type.\n        if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\n            throw ClientAuthError.createClientInfoEmptyError();\n        }\n\n        return serverTokenResponse.client_info ?\n            AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, authority, idToken, oboAssertion, cloudGraphHostName, msGraphhost) :\n            AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\n    }\n\n    /**\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\n     *\n     * Optionally takes a state string that is set as-is in the response.\n     *\n     * @param cacheRecord\n     * @param idTokenObj\n     * @param fromTokenCache\n     * @param stateString\n     */\n    static async generateAuthenticationResult(\n        cryptoObj: ICrypto, \n        authority: Authority,\n        cacheRecord: CacheRecord, \n        fromTokenCache: boolean, \n        request: BaseAuthRequest,\n        idTokenObj?: AuthToken,\n        requestState?: RequestStateObject): Promise<AuthenticationResult> {\n        let accessToken: string = \"\";\n        let responseScopes: Array<string> = [];\n        let expiresOn: Date | null = null;\n        let extExpiresOn: Date | undefined;\n        let familyId: string = Constants.EMPTY_STRING;\n\n        if (cacheRecord.accessToken) {\n            if (cacheRecord.accessToken.tokenType === AuthenticationScheme.POP) {\n                const popTokenGenerator: PopTokenGenerator = new PopTokenGenerator(cryptoObj);\n                accessToken = await popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request);\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n        }\n\n        if (cacheRecord.appMetadata) {\n            familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\n        }\n        const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\n        const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\n\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            extExpiresOn: extExpiresOn,\n            familyId: familyId,\n            tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || Constants.EMPTY_STRING,\n            msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}