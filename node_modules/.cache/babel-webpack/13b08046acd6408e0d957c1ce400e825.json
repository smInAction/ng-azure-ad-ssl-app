{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.js';\nimport { NetworkManager } from '../network/NetworkManager.js';\nimport { Logger } from '../logger/Logger.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\nimport { name, version } from '../packageMetadata.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\n\nvar BaseClient =\n/** @class */\nfunction () {\n  function BaseClient(configuration) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration); // Initialize the logger\n\n    this.logger = new Logger(this.config.loggerOptions, name, version); // Initialize crypto\n\n    this.cryptoUtils = this.config.cryptoInterface; // Initialize storage interface\n\n    this.cacheManager = this.config.storageInterface; // Set the network interface\n\n    this.networkClient = this.config.networkInterface; // Set the NetworkManager\n\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager); // Set TelemetryManager\n\n    this.serverTelemetryManager = this.config.serverTelemetryManager; // set Authority\n\n    this.authority = this.config.authOptions.authority;\n  }\n  /**\r\n   * Creates default headers for requests to token endpoint\r\n   */\n\n\n  BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {\n    var headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = \"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n\n          break;\n\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = \"UPN: \" + ccsCred.credential;\n          break;\n      }\n    }\n\n    return headers;\n  };\n  /**\r\n   * Http post to token endpoint\r\n   * @param tokenEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   * @param thumbprint\r\n   */\n\n\n  BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n              body: queryString,\n              headers: headers\n            })];\n\n          case 1:\n            response = _a.sent();\n\n            if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n              // Telemetry data successfully logged by server, clear Telemetry cache\n              this.config.serverTelemetryManager.clearTelemetryCache();\n            }\n\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the authority object of the client. Endpoint discovery must be completed.\r\n   * @param updatedAuthority\r\n   */\n\n\n  BaseClient.prototype.updateAuthority = function (updatedAuthority) {\n    if (!updatedAuthority.discoveryComplete()) {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n    }\n\n    this.authority = updatedAuthority;\n  };\n\n  return BaseClient;\n}();\n\nexport { BaseClient };","map":{"version":3,"sources":["../../src/client/BaseClient.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;AAqBA;;;;;;;AA4BI,WAAA,UAAA,CAAsB,aAAtB,EAAwD;;AAEpD,SAAK,MAAL,GAAc,wBAAwB,CAAC,aAAD,CAAtC,CAFoD,C;;AAKpD,SAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,KAAK,MAAL,CAAY,aAAvB,EAAsC,IAAtC,EAA4C,OAA5C,CAAd,CALoD,C;;AAQpD,SAAK,WAAL,GAAmB,KAAK,MAAL,CAAY,eAA/B,CARoD,C;;AAWpD,SAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,gBAAhC,CAXoD,C;;AAcpD,SAAK,aAAL,GAAqB,KAAK,MAAL,CAAY,gBAAjC,CAdoD,C;;AAiBpD,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB,KAAK,aAAxB,EAAuC,KAAK,YAA5C,CAAtB,CAjBoD,C;;AAoBpD,SAAK,sBAAL,GAA8B,KAAK,MAAL,CAAY,sBAA1C,CApBoD,C;;AAuBpD,SAAK,SAAL,GAAiB,KAAK,MAAL,CAAY,WAAZ,CAAwB,SAAzC;AACH;;;;;;AAKS,EAAA,UAAA,CAAA,SAAA,CAAA,yBAAA,GAAV,UAAoC,OAApC,EAA2D;AACvD,QAAM,OAAO,GAA2B,EAAxC;AACA,IAAA,OAAO,CAAC,WAAW,CAAC,YAAb,CAAP,GAAoC,SAAS,CAAC,qBAA9C;;AAEA,QAAI,CAAC,KAAK,MAAL,CAAY,aAAZ,CAA0B,oBAA3B,IAAmD,OAAvD,EAAgE;AAC5D,cAAQ,OAAO,CAAC,IAAhB;AACI,aAAK,iBAAiB,CAAC,eAAvB;AACI,cAAI;AACA,gBAAM,UAAU,GAAG,gCAAgC,CAAC,OAAO,CAAC,UAAT,CAAnD;AACA,YAAA,OAAO,CAAC,WAAW,CAAC,UAAb,CAAP,GAAkC,SAAO,UAAU,CAAC,GAAlB,GAAqB,GAArB,GAAyB,UAAU,CAAC,IAAtE;AACH,WAHD,CAGE,OAAO,CAAP,EAAU;AACR,iBAAK,MAAL,CAAY,OAAZ,CAAoB,qDAAqD,CAAzE;AACH;;AACD;;AACJ,aAAK,iBAAiB,CAAC,GAAvB;AACI,UAAA,OAAO,CAAC,WAAW,CAAC,UAAb,CAAP,GAAkC,UAAQ,OAAO,CAAC,UAAlD;AACA;AAXR;AAaH;;AACD,WAAO,OAAP;AACH,GApBS;;;;;;;;;;AA6BM,EAAA,UAAA,CAAA,SAAA,CAAA,0BAAA,GAAhB,UAA2C,aAA3C,EAAkE,WAAlE,EAAuF,OAAvF,EAAwH,UAAxH,EAAqJ;;;;;;AAChI,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,cAAL,CAAoB,eAApB,CACnB,UADmB,EAEnB,aAFmB,EAGnB;AAAE,cAAA,IAAI,EAAE,WAAR;AAAqB,cAAA,OAAO,EAAE;AAA9B,aAHmB,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;AAMN,gBAAI,KAAK,MAAL,CAAY,sBAAZ,IAAsC,QAAQ,CAAC,MAAT,GAAkB,GAAxD,IAA+D,QAAQ,CAAC,MAAT,KAAoB,GAAvF,EAA4F;;AAExF,mBAAK,MAAL,CAAY,sBAAZ,CAAmC,mBAAnC;AACH;;AAED,mBAAA,CAAA;AAAA;AAAA,cAAO,QAAP,CAAA;;;;AACH,GAbe;;;;;;;AAmBhB,EAAA,UAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,gBAAhB,EAA2C;AACvC,QAAI,CAAC,gBAAgB,CAAC,iBAAjB,EAAL,EAA2C;AACvC,YAAM,eAAe,CAAC,sCAAhB,CAAuD,yDAAvD,CAAN;AACH;;AACD,SAAK,SAAL,GAAiB,gBAAjB;AACH,GALD;;AAMJ,SAAA,UAAA;AAAC,C","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration, buildClientConfiguration, CommonClientConfiguration } from \"../config/ClientConfiguration\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkManager, NetworkResponse } from \"../network/NetworkManager\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { Authority } from \"../authority/Authority\";\nimport { Logger } from \"../logger/Logger\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { version, name } from \"../packageMetadata\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { CcsCredential, CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\n\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n */\nexport abstract class BaseClient {\n    // Logger object\n    public logger: Logger;\n\n    // Application config\n    protected config: CommonClientConfiguration;\n\n    // Crypto Interface\n    protected cryptoUtils: ICrypto;\n\n    // Storage Interface\n    protected cacheManager: CacheManager;\n\n    // Network Interface\n    protected networkClient: INetworkModule;\n\n    // Server Telemetry Manager\n    protected serverTelemetryManager: ServerTelemetryManager | null;\n\n    // Network Manager\n    protected networkManager: NetworkManager;\n\n    // Default authority object\n    public authority: Authority;\n\n    protected constructor(configuration: ClientConfiguration) {\n        // Set the configuration\n        this.config = buildClientConfiguration(configuration);\n\n        // Initialize the logger\n        this.logger = new Logger(this.config.loggerOptions, name, version);\n\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n\n        // Set the NetworkManager\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n    }\n\n    /**\n     * Creates default headers for requests to token endpoint\n     */\n    protected createTokenRequestHeaders(ccsCred?: CcsCredential): Record<string, string> {\n        const headers: Record<string, string> = {};\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Http post to token endpoint\n     * @param tokenEndpoint\n     * @param queryString\n     * @param headers\n     * @param thumbprint\n     */\n    protected async executePostToTokenEndpoint(tokenEndpoint: string, queryString: string, headers: Record<string, string>, thumbprint: RequestThumbprint): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const response = await this.networkManager.sendPostRequest<ServerAuthorizationTokenResponse>(\n            thumbprint,\n            tokenEndpoint,\n            { body: queryString, headers: headers }\n        );\n\n        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n\n        return response;\n    }\n\n    /**\n     * Updates the authority object of the client. Endpoint discovery must be completed.\n     * @param updatedAuthority \n     */\n    updateAuthority(updatedAuthority: Authority): void {\n        if (!updatedAuthority.discoveryComplete()) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n        }\n        this.authority = updatedAuthority;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}