{"ast":null,"code":"/*! @azure/msal-browser v2.15.0 2021-06-29 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { StringUtils, AuthError } from '@azure/msal-common';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\n\nvar BrowserAuthErrorMessage = {\n  pkceNotGenerated: {\n    code: \"pkce_not_created\",\n    desc: \"The PKCE code challenge and verifier could not be generated.\"\n  },\n  cryptoDoesNotExist: {\n    code: \"crypto_nonexistent\",\n    desc: \"The crypto object or function is not available.\"\n  },\n  httpMethodNotImplementedError: {\n    code: \"http_method_not_implemented\",\n    desc: \"The HTTP method given has not been implemented in this library.\"\n  },\n  emptyNavigateUriError: {\n    code: \"empty_navigate_uri\",\n    desc: \"Navigation URI is empty. Please check stack trace for more info.\"\n  },\n  hashEmptyError: {\n    code: \"hash_empty_error\",\n    desc: \"Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash.\"\n  },\n  hashDoesNotContainStateError: {\n    code: \"no_state_in_hash\",\n    desc: \"Hash does not contain state. Please verify that the request originated from msal.\"\n  },\n  hashDoesNotContainKnownPropertiesError: {\n    code: \"hash_does_not_contain_known_properties\",\n    desc: \"Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.\"\n  },\n  unableToParseStateError: {\n    code: \"unable_to_parse_state\",\n    desc: \"Unable to parse state. Please verify that the request originated from msal.\"\n  },\n  stateInteractionTypeMismatchError: {\n    code: \"state_interaction_type_mismatch\",\n    desc: \"Hash contains state but the interaction type does not match the caller.\"\n  },\n  interactionInProgress: {\n    code: \"interaction_in_progress\",\n    desc: \"Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.  For more visit: aka.ms/msaljs/browser-errors.\"\n  },\n  popUpWindowError: {\n    code: \"popup_window_error\",\n    desc: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\"\n  },\n  emptyWindowError: {\n    code: \"empty_window_error\",\n    desc: \"window.open returned null or undefined window object.\"\n  },\n  userCancelledError: {\n    code: \"user_cancelled\",\n    desc: \"User cancelled the flow.\"\n  },\n  monitorPopupTimeoutError: {\n    code: \"monitor_window_timeout\",\n    desc: \"Token acquisition in popup failed due to timeout. For more visit: aka.ms/msaljs/browser-errors.\"\n  },\n  monitorIframeTimeoutError: {\n    code: \"monitor_window_timeout\",\n    desc: \"Token acquisition in iframe failed due to timeout. For more visit: aka.ms/msaljs/browser-errors.\"\n  },\n  redirectInIframeError: {\n    code: \"redirect_in_iframe\",\n    desc: \"Code flow is not supported inside an iframe. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\"\n  },\n  blockTokenRequestsInHiddenIframeError: {\n    code: \"block_iframe_reload\",\n    desc: \"Request was blocked inside an iframe because MSAL detected an authentication response. For more visit: aka.ms/msaljs/browser-errors\"\n  },\n  blockAcquireTokenInPopupsError: {\n    code: \"block_nested_popups\",\n    desc: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\"\n  },\n  iframeClosedPrematurelyError: {\n    code: \"iframe_closed_prematurely\",\n    desc: \"The iframe being monitored was closed prematurely.\"\n  },\n  silentSSOInsufficientInfoError: {\n    code: \"silent_sso_error\",\n    desc: \"Silent SSO could not be completed - insufficient information was provided. Please provide either a loginHint or sid.\"\n  },\n  noAccountError: {\n    code: \"no_account_error\",\n    desc: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\"\n  },\n  silentPromptValueError: {\n    code: \"silent_prompt_value_error\",\n    desc: \"The value given for the prompt value is not valid for silent requests - must be set to 'none'.\"\n  },\n  noTokenRequestCacheError: {\n    code: \"no_token_request_cache_error\",\n    desc: \"No token request in found in cache.\"\n  },\n  unableToParseTokenRequestCacheError: {\n    code: \"unable_to_parse_token_request_cache_error\",\n    desc: \"The cached token request could not be parsed.\"\n  },\n  noCachedAuthorityError: {\n    code: \"no_cached_authority_error\",\n    desc: \"No cached authority found.\"\n  },\n  authRequestNotSet: {\n    code: \"auth_request_not_set_error\",\n    desc: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\"\n  },\n  invalidCacheType: {\n    code: \"invalid_cache_type\",\n    desc: \"Invalid cache type\"\n  },\n  notInBrowserEnvironment: {\n    code: \"non_browser_environment\",\n    desc: \"Login and token requests are not supported in non-browser environments.\"\n  },\n  databaseNotOpen: {\n    code: \"database_not_open\",\n    desc: \"Database is not open!\"\n  },\n  noNetworkConnectivity: {\n    code: \"no_network_connectivity\",\n    desc: \"No network connectivity. Check your internet connection.\"\n  },\n  postRequestFailed: {\n    code: \"post_request_failed\",\n    desc: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\"\n  },\n  getRequestFailed: {\n    code: \"get_request_failed\",\n    desc: \"Network request failed. Please check the network trace to determine root cause.\"\n  },\n  failedToParseNetworkResponse: {\n    code: \"failed_to_parse_response\",\n    desc: \"Failed to parse network response. Check network trace.\"\n  }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\n\nvar BrowserAuthError =\n/** @class */\nfunction (_super) {\n  __extends(BrowserAuthError, _super);\n\n  function BrowserAuthError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n\n    Object.setPrototypeOf(_this, BrowserAuthError.prototype);\n    _this.name = \"BrowserAuthError\";\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when PKCE is not implemented.\r\n   * @param errDetail\r\n   */\n\n\n  BrowserAuthError.createPkceNotGeneratedError = function (errDetail) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.pkceNotGenerated.code, BrowserAuthErrorMessage.pkceNotGenerated.desc + \" Detail:\" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the crypto object is unavailable.\r\n   * @param errDetail\r\n   */\n\n\n  BrowserAuthError.createCryptoNotAvailableError = function (errDetail) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.cryptoDoesNotExist.code, BrowserAuthErrorMessage.cryptoDoesNotExist.desc + \" Detail:\" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.\r\n   * @param method\r\n   */\n\n\n  BrowserAuthError.createHttpMethodNotImplementedError = function (method) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.httpMethodNotImplementedError.code, BrowserAuthErrorMessage.httpMethodNotImplementedError.desc + \" Given Method: \" + method);\n  };\n  /**\r\n   * Creates an error thrown when the navigation URI is empty.\r\n   */\n\n\n  BrowserAuthError.createEmptyNavigationUriError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the hash string value is unexpectedly empty.\r\n   * @param hashValue\r\n   */\n\n\n  BrowserAuthError.createEmptyHashError = function (hashValue) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.hashEmptyError.code, BrowserAuthErrorMessage.hashEmptyError.desc + \" Given Url: \" + hashValue);\n  };\n  /**\r\n   * Creates an error thrown when the hash string value is unexpectedly empty.\r\n   */\n\n\n  BrowserAuthError.createHashDoesNotContainStateError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainStateError.code, BrowserAuthErrorMessage.hashDoesNotContainStateError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the hash string value does not contain known properties\r\n   */\n\n\n  BrowserAuthError.createHashDoesNotContainKnownPropertiesError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.code, BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the hash string value is unexpectedly empty.\r\n   */\n\n\n  BrowserAuthError.createUnableToParseStateError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseStateError.code, BrowserAuthErrorMessage.unableToParseStateError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the state value in the hash does not match the interaction type of the API attempting to consume it.\r\n   */\n\n\n  BrowserAuthError.createStateInteractionTypeMismatchError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.stateInteractionTypeMismatchError.code, BrowserAuthErrorMessage.stateInteractionTypeMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when a browser interaction (redirect or popup) is in progress.\r\n   */\n\n\n  BrowserAuthError.createInteractionInProgressError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);\n  };\n  /**\r\n   * Creates an error thrown when the popup window could not be opened.\r\n   * @param errDetail\r\n   */\n\n\n  BrowserAuthError.createPopupWindowError = function (errDetail) {\n    var errorMessage = BrowserAuthErrorMessage.popUpWindowError.desc;\n    errorMessage = !StringUtils.isEmpty(errDetail) ? errorMessage + \" Details: \" + errDetail : errorMessage;\n    return new BrowserAuthError(BrowserAuthErrorMessage.popUpWindowError.code, errorMessage);\n  };\n  /**\r\n   * Creates an error thrown when window.open returns an empty window object.\r\n   * @param errDetail\r\n   */\n\n\n  BrowserAuthError.createEmptyWindowCreatedError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.emptyWindowError.code, BrowserAuthErrorMessage.emptyWindowError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the user closes a popup.\r\n   */\n\n\n  BrowserAuthError.createUserCancelledError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.userCancelledError.code, BrowserAuthErrorMessage.userCancelledError.desc);\n  };\n  /**\r\n   * Creates an error thrown when monitorPopupFromHash times out for a given popup.\r\n   */\n\n\n  BrowserAuthError.createMonitorPopupTimeoutError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.monitorPopupTimeoutError.code, BrowserAuthErrorMessage.monitorPopupTimeoutError.desc);\n  };\n  /**\r\n   * Creates an error thrown when monitorIframeFromHash times out for a given iframe.\r\n   */\n\n\n  BrowserAuthError.createMonitorIframeTimeoutError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.monitorIframeTimeoutError.code, BrowserAuthErrorMessage.monitorIframeTimeoutError.desc);\n  };\n  /**\r\n   * Creates an error thrown when navigateWindow is called inside an iframe.\r\n   * @param windowParentCheck\r\n   */\n\n\n  BrowserAuthError.createRedirectInIframeError = function (windowParentCheck) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.redirectInIframeError.code, BrowserAuthErrorMessage.redirectInIframeError.desc + \" (window.parent !== window) => \" + windowParentCheck);\n  };\n  /**\r\n   * Creates an error thrown when an auth reload is done inside an iframe.\r\n   */\n\n\n  BrowserAuthError.createBlockReloadInHiddenIframeError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.code, BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.desc);\n  };\n  /**\r\n   * Creates an error thrown when a popup attempts to call an acquireToken API\r\n   * @returns\r\n   */\n\n\n  BrowserAuthError.createBlockAcquireTokenInPopupsError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.code, BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.desc);\n  };\n  /**\r\n   * Creates an error thrown when an iframe is found to be closed before the timeout is reached.\r\n   */\n\n\n  BrowserAuthError.createIframeClosedPrematurelyError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.iframeClosedPrematurelyError.code, BrowserAuthErrorMessage.iframeClosedPrematurelyError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the login_hint, sid or account object is not provided in the ssoSilent API.\r\n   */\n\n\n  BrowserAuthError.createSilentSSOInsufficientInfoError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.silentSSOInsufficientInfoError.code, BrowserAuthErrorMessage.silentSSOInsufficientInfoError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the account object is not provided in the acquireTokenSilent API.\r\n   */\n\n\n  BrowserAuthError.createNoAccountError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.noAccountError.code, BrowserAuthErrorMessage.noAccountError.desc);\n  };\n  /**\r\n   * Creates an error thrown when a given prompt value is invalid for silent requests.\r\n   */\n\n\n  BrowserAuthError.createSilentPromptValueError = function (givenPrompt) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.silentPromptValueError.code, BrowserAuthErrorMessage.silentPromptValueError.desc + \" Given value: \" + givenPrompt);\n  };\n  /**\r\n   * Creates an error thrown when the cached token request could not be retrieved from the cache\r\n   */\n\n\n  BrowserAuthError.createUnableToParseTokenRequestCacheError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.code, BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the token request could not be retrieved from the cache\r\n   */\n\n\n  BrowserAuthError.createNoTokenRequestCacheError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.noTokenRequestCacheError.code, BrowserAuthErrorMessage.noTokenRequestCacheError.desc);\n  };\n  /**\r\n   * Creates an error thrown when handleCodeResponse is called before initiateAuthRequest (InteractionHandler)\r\n   */\n\n\n  BrowserAuthError.createAuthRequestNotSetError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.authRequestNotSet.code, BrowserAuthErrorMessage.authRequestNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the authority could not be retrieved from the cache\r\n   */\n\n\n  BrowserAuthError.createNoCachedAuthorityError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.noCachedAuthorityError.code, BrowserAuthErrorMessage.noCachedAuthorityError.desc);\n  };\n  /**\r\n   * Creates an error thrown if cache type is invalid.\r\n   */\n\n\n  BrowserAuthError.createInvalidCacheTypeError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.invalidCacheType.code, \"\" + BrowserAuthErrorMessage.invalidCacheType.desc);\n  };\n  /**\r\n   * Create an error thrown when login and token requests are made from a non-browser environment\r\n   */\n\n\n  BrowserAuthError.createNonBrowserEnvironmentError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.notInBrowserEnvironment.code, BrowserAuthErrorMessage.notInBrowserEnvironment.desc);\n  };\n  /**\r\n   * Create an error thrown when indexDB database is not open\r\n   */\n\n\n  BrowserAuthError.createDatabaseNotOpenError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.databaseNotOpen.code, BrowserAuthErrorMessage.databaseNotOpen.desc);\n  };\n  /**\r\n   * Create an error thrown when token fetch fails due to no internet\r\n   */\n\n\n  BrowserAuthError.createNoNetworkConnectivityError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.noNetworkConnectivity.code, BrowserAuthErrorMessage.noNetworkConnectivity.desc);\n  };\n  /**\r\n   * Create an error thrown when token fetch fails due to reasons other than internet connectivity\r\n   */\n\n\n  BrowserAuthError.createPostRequestFailedError = function (errorDesc, endpoint) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.postRequestFailed.code, BrowserAuthErrorMessage.postRequestFailed.desc + \" | Network client threw: \" + errorDesc + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Create an error thrown when get request fails due to reasons other than internet connectivity\r\n   */\n\n\n  BrowserAuthError.createGetRequestFailedError = function (errorDesc, endpoint) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.getRequestFailed.code, BrowserAuthErrorMessage.getRequestFailed.desc + \" | Network client threw: \" + errorDesc + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Create an error thrown when network client fails to parse network response\r\n   */\n\n\n  BrowserAuthError.createFailedToParseNetworkResponseError = function (endpoint) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.failedToParseNetworkResponse.code, BrowserAuthErrorMessage.failedToParseNetworkResponse.desc + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n\n  return BrowserAuthError;\n}(AuthError);\n\nexport { BrowserAuthError, BrowserAuthErrorMessage };","map":{"version":3,"sources":["../../src/error/BrowserAuthError.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError, StringUtils } from \"@azure/msal-common\";\n\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const BrowserAuthErrorMessage = {\n    pkceNotGenerated: {\n        code: \"pkce_not_created\",\n        desc: \"The PKCE code challenge and verifier could not be generated.\"\n    },\n    cryptoDoesNotExist: {\n        code: \"crypto_nonexistent\",\n        desc: \"The crypto object or function is not available.\"\n    },\n    httpMethodNotImplementedError: {\n        code: \"http_method_not_implemented\",\n        desc: \"The HTTP method given has not been implemented in this library.\"\n    },\n    emptyNavigateUriError: {\n        code: \"empty_navigate_uri\",\n        desc: \"Navigation URI is empty. Please check stack trace for more info.\"\n    },\n    hashEmptyError: {\n        code: \"hash_empty_error\",\n        desc: \"Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash.\"\n    },\n    hashDoesNotContainStateError: {\n        code: \"no_state_in_hash\",\n        desc: \"Hash does not contain state. Please verify that the request originated from msal.\"\n    },\n    hashDoesNotContainKnownPropertiesError: {\n        code: \"hash_does_not_contain_known_properties\",\n        desc: \"Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.\"\n    },\n    unableToParseStateError: {\n        code: \"unable_to_parse_state\",\n        desc: \"Unable to parse state. Please verify that the request originated from msal.\"\n    },\n    stateInteractionTypeMismatchError: {\n        code: \"state_interaction_type_mismatch\",\n        desc: \"Hash contains state but the interaction type does not match the caller.\"\n    },\n    interactionInProgress: {\n        code: \"interaction_in_progress\",\n        desc: \"Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.  For more visit: aka.ms/msaljs/browser-errors.\"\n    },\n    popUpWindowError: {\n        code: \"popup_window_error\",\n        desc: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\"\n    },\n    emptyWindowError: {\n        code: \"empty_window_error\",\n        desc: \"window.open returned null or undefined window object.\"\n    },\n    userCancelledError: {\n        code: \"user_cancelled\",\n        desc: \"User cancelled the flow.\"\n    },\n    monitorPopupTimeoutError: {\n        code: \"monitor_window_timeout\",\n        desc: \"Token acquisition in popup failed due to timeout. For more visit: aka.ms/msaljs/browser-errors.\"\n    },\n    monitorIframeTimeoutError: {\n        code: \"monitor_window_timeout\",\n        desc: \"Token acquisition in iframe failed due to timeout. For more visit: aka.ms/msaljs/browser-errors.\"\n    },\n    redirectInIframeError: {\n        code: \"redirect_in_iframe\",\n        desc: \"Code flow is not supported inside an iframe. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\"\n    },\n    blockTokenRequestsInHiddenIframeError: {\n        code: \"block_iframe_reload\",\n        desc: \"Request was blocked inside an iframe because MSAL detected an authentication response. For more visit: aka.ms/msaljs/browser-errors\"\n    },\n    blockAcquireTokenInPopupsError: {\n        code: \"block_nested_popups\",\n        desc: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\"\n    },\n    iframeClosedPrematurelyError: {\n        code: \"iframe_closed_prematurely\",\n        desc: \"The iframe being monitored was closed prematurely.\"\n    },\n    silentSSOInsufficientInfoError: {\n        code: \"silent_sso_error\",\n        desc: \"Silent SSO could not be completed - insufficient information was provided. Please provide either a loginHint or sid.\"\n    },\n    noAccountError: {\n        code: \"no_account_error\",\n        desc: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\"\n    },\n    silentPromptValueError: {\n        code: \"silent_prompt_value_error\",\n        desc: \"The value given for the prompt value is not valid for silent requests - must be set to 'none'.\"\n    },\n    noTokenRequestCacheError: {\n        code: \"no_token_request_cache_error\",\n        desc: \"No token request in found in cache.\"\n    },\n    unableToParseTokenRequestCacheError: {\n        code: \"unable_to_parse_token_request_cache_error\",\n        desc: \"The cached token request could not be parsed.\"\n    },\n    noCachedAuthorityError: {\n        code: \"no_cached_authority_error\",\n        desc: \"No cached authority found.\"\n    },\n    authRequestNotSet: {\n        code: \"auth_request_not_set_error\",\n        desc: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\"\n    },\n    invalidCacheType: {\n        code: \"invalid_cache_type\",\n        desc: \"Invalid cache type\"\n    },\n    notInBrowserEnvironment: {\n        code: \"non_browser_environment\",\n        desc: \"Login and token requests are not supported in non-browser environments.\"\n    },\n    databaseNotOpen: {\n        code: \"database_not_open\",\n        desc: \"Database is not open!\"\n    },\n    noNetworkConnectivity: {\n        code: \"no_network_connectivity\",\n        desc: \"No network connectivity. Check your internet connection.\"\n    },\n    postRequestFailed: {\n        code: \"post_request_failed\",\n        desc: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\"\n    },\n    getRequestFailed: {\n        code: \"get_request_failed\",\n        desc: \"Network request failed. Please check the network trace to determine root cause.\"\n    },\n    failedToParseNetworkResponse: {\n        code: \"failed_to_parse_response\",\n        desc: \"Failed to parse network response. Check network trace.\"\n    }\n};\n\n/**\n * Browser library error class thrown by the MSAL.js library for SPAs\n */\nexport class BrowserAuthError extends AuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n\n        Object.setPrototypeOf(this, BrowserAuthError.prototype);\n        this.name = \"BrowserAuthError\";\n    }\n\n    /**\n     * Creates an error thrown when PKCE is not implemented.\n     * @param errDetail \n     */\n    static createPkceNotGeneratedError(errDetail: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.pkceNotGenerated.code,\n            `${BrowserAuthErrorMessage.pkceNotGenerated.desc} Detail:${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the crypto object is unavailable.\n     * @param errDetail \n     */\n    static createCryptoNotAvailableError(errDetail: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.cryptoDoesNotExist.code,\n            `${BrowserAuthErrorMessage.cryptoDoesNotExist.desc} Detail:${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.\n     * @param method \n     */\n    static createHttpMethodNotImplementedError(method: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.httpMethodNotImplementedError.code,\n            `${BrowserAuthErrorMessage.httpMethodNotImplementedError.desc} Given Method: ${method}`);\n    }\n\n    /**\n     * Creates an error thrown when the navigation URI is empty.\n     */\n    static createEmptyNavigationUriError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value is unexpectedly empty.\n     * @param hashValue \n     */\n    static createEmptyHashError(hashValue: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.hashEmptyError.code, `${BrowserAuthErrorMessage.hashEmptyError.desc} Given Url: ${hashValue}`);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value is unexpectedly empty.\n     */\n    static createHashDoesNotContainStateError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainStateError.code, BrowserAuthErrorMessage.hashDoesNotContainStateError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value does not contain known properties\n     */\n    static createHashDoesNotContainKnownPropertiesError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.code, BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value is unexpectedly empty.\n     */\n    static createUnableToParseStateError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseStateError.code, BrowserAuthErrorMessage.unableToParseStateError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the state value in the hash does not match the interaction type of the API attempting to consume it.\n     */\n    static createStateInteractionTypeMismatchError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.stateInteractionTypeMismatchError.code, BrowserAuthErrorMessage.stateInteractionTypeMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when a browser interaction (redirect or popup) is in progress.\n     */\n    static createInteractionInProgressError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);\n    }\n\n    /**\n     * Creates an error thrown when the popup window could not be opened.\n     * @param errDetail \n     */\n    static createPopupWindowError(errDetail?: string): BrowserAuthError {\n        let errorMessage = BrowserAuthErrorMessage.popUpWindowError.desc;\n        errorMessage = !StringUtils.isEmpty(errDetail) ? `${errorMessage} Details: ${errDetail}` : errorMessage;\n        return new BrowserAuthError(BrowserAuthErrorMessage.popUpWindowError.code, errorMessage);\n    }\n\n    /**\n     * Creates an error thrown when window.open returns an empty window object.\n     * @param errDetail \n     */\n    static createEmptyWindowCreatedError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.emptyWindowError.code, BrowserAuthErrorMessage.emptyWindowError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the user closes a popup.\n     */\n    static createUserCancelledError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.userCancelledError.code,\n            BrowserAuthErrorMessage.userCancelledError.desc);\n    }\n\n    /**\n     * Creates an error thrown when monitorPopupFromHash times out for a given popup.\n     */\n    static createMonitorPopupTimeoutError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.monitorPopupTimeoutError.code,\n            BrowserAuthErrorMessage.monitorPopupTimeoutError.desc);\n    }\n\n    /**\n     * Creates an error thrown when monitorIframeFromHash times out for a given iframe.\n     */\n    static createMonitorIframeTimeoutError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.monitorIframeTimeoutError.code,\n            BrowserAuthErrorMessage.monitorIframeTimeoutError.desc);\n    }\n\n    /**\n     * Creates an error thrown when navigateWindow is called inside an iframe.\n     * @param windowParentCheck \n     */\n    static createRedirectInIframeError(windowParentCheck: boolean): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.redirectInIframeError.code, \n            `${BrowserAuthErrorMessage.redirectInIframeError.desc} (window.parent !== window) => ${windowParentCheck}`);\n    }\n\n    /**\n     * Creates an error thrown when an auth reload is done inside an iframe.\n     */\n    static createBlockReloadInHiddenIframeError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.code,\n            BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.desc);\n    }\n\n    /**\n     * Creates an error thrown when a popup attempts to call an acquireToken API\n     * @returns \n     */\n    static createBlockAcquireTokenInPopupsError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.code, \n            BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.desc);\n    }\n\n    /**\n     * Creates an error thrown when an iframe is found to be closed before the timeout is reached.\n     */\n    static createIframeClosedPrematurelyError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.iframeClosedPrematurelyError.code, BrowserAuthErrorMessage.iframeClosedPrematurelyError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the login_hint, sid or account object is not provided in the ssoSilent API.\n     */\n    static createSilentSSOInsufficientInfoError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.silentSSOInsufficientInfoError.code, BrowserAuthErrorMessage.silentSSOInsufficientInfoError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the account object is not provided in the acquireTokenSilent API.\n     */\n    static createNoAccountError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noAccountError.code, BrowserAuthErrorMessage.noAccountError.desc);\n    }\n\n    /**\n     * Creates an error thrown when a given prompt value is invalid for silent requests.\n     */\n    static createSilentPromptValueError(givenPrompt: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.silentPromptValueError.code, `${BrowserAuthErrorMessage.silentPromptValueError.desc} Given value: ${givenPrompt}`);\n    }\n\n    /**\n     * Creates an error thrown when the cached token request could not be retrieved from the cache\n     */\n    static createUnableToParseTokenRequestCacheError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.code,\n            BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the token request could not be retrieved from the cache\n     */\n    static createNoTokenRequestCacheError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noTokenRequestCacheError.code,\n            BrowserAuthErrorMessage.noTokenRequestCacheError.desc);\n    }\n\n    /**\n     * Creates an error thrown when handleCodeResponse is called before initiateAuthRequest (InteractionHandler)\n     */\n    static createAuthRequestNotSetError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.authRequestNotSet.code,\n            BrowserAuthErrorMessage.authRequestNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the authority could not be retrieved from the cache\n     */\n    static createNoCachedAuthorityError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noCachedAuthorityError.code,\n            BrowserAuthErrorMessage.noCachedAuthorityError.desc);\n    }\n\n    /**\n     * Creates an error thrown if cache type is invalid.\n     */\n    static createInvalidCacheTypeError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.invalidCacheType.code, `${BrowserAuthErrorMessage.invalidCacheType.desc}`);\n    }\n\n    /**\n     * Create an error thrown when login and token requests are made from a non-browser environment\n     */\n    static createNonBrowserEnvironmentError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.notInBrowserEnvironment.code, BrowserAuthErrorMessage.notInBrowserEnvironment.desc);\n    }\n\n    /**\n     * Create an error thrown when indexDB database is not open\n     */\n    static createDatabaseNotOpenError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.databaseNotOpen.code, BrowserAuthErrorMessage.databaseNotOpen.desc);\n    }\n\n    /**\n     * Create an error thrown when token fetch fails due to no internet\n     */\n    static createNoNetworkConnectivityError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noNetworkConnectivity.code, BrowserAuthErrorMessage.noNetworkConnectivity.desc);\n    }\n\n    /**\n     * Create an error thrown when token fetch fails due to reasons other than internet connectivity\n     */\n    static createPostRequestFailedError(errorDesc: string, endpoint: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.postRequestFailed.code, `${BrowserAuthErrorMessage.postRequestFailed.desc} | Network client threw: ${errorDesc} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Create an error thrown when get request fails due to reasons other than internet connectivity\n     */\n    static createGetRequestFailedError(errorDesc: string, endpoint: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.getRequestFailed.code, `${BrowserAuthErrorMessage.getRequestFailed.desc} | Network client threw: ${errorDesc} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Create an error thrown when network client fails to parse network response\n     */\n    static createFailedToParseNetworkResponseError(endpoint: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.failedToParseNetworkResponse.code, `${BrowserAuthErrorMessage.failedToParseNetworkResponse.desc} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}