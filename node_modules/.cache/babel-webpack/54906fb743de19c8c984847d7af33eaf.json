{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { OIDC_SCOPES } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\n\nvar ScopeSet =\n/** @class */\nfunction () {\n  function ScopeSet(inputScopes) {\n    var _this = this; // Filter empty string and null/undefined array items\n\n\n    var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\n    var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : []; // Validate and filter scopes (validate function throws if validation fails)\n\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n\n    filteredInput.forEach(function (scope) {\n      return _this.scopes.add(scope);\n    });\n  }\n  /**\r\n   * Factory method to create ScopeSet from space-delimited string\r\n   * @param inputScopeString\r\n   * @param appClientId\r\n   * @param scopesRequired\r\n   */\n\n\n  ScopeSet.fromString = function (inputScopeString) {\n    var scopeString = inputScopeString || \"\";\n    var inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  };\n  /**\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   */\n\n\n  ScopeSet.prototype.validateInputScopes = function (inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError();\n    }\n  };\n  /**\r\n   * Check if a given scope is present in this set of scopes.\r\n   * @param scope\r\n   */\n\n\n  ScopeSet.prototype.containsScope = function (scope) {\n    var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes); // compare lowercase scopes\n\n    return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  };\n  /**\r\n   * Check if a set of scopes is present in this set of scopes.\r\n   * @param scopeSet\r\n   */\n\n\n  ScopeSet.prototype.containsScopeSet = function (scopeSet) {\n    var _this = this;\n\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) {\n      return _this.containsScope(scope);\n    });\n  };\n  /**\r\n   * Check if set of scopes contains only the defaults\r\n   */\n\n\n  ScopeSet.prototype.containsOnlyOIDCScopes = function () {\n    var _this = this;\n\n    var defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      if (_this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  };\n  /**\r\n   * Appends single scope if passed\r\n   * @param newScope\r\n   */\n\n\n  ScopeSet.prototype.appendScope = function (newScope) {\n    if (!StringUtils.isEmpty(newScope)) {\n      this.scopes.add(newScope.trim());\n    }\n  };\n  /**\r\n   * Appends multiple scopes if passed\r\n   * @param newScopes\r\n   */\n\n\n  ScopeSet.prototype.appendScopes = function (newScopes) {\n    var _this = this;\n\n    try {\n      newScopes.forEach(function (newScope) {\n        return _this.appendScope(newScope);\n      });\n    } catch (e) {\n      throw ClientAuthError.createAppendScopeSetError(e);\n    }\n  };\n  /**\r\n   * Removes element from set of scopes.\r\n   * @param scope\r\n   */\n\n\n  ScopeSet.prototype.removeScope = function (scope) {\n    if (StringUtils.isEmpty(scope)) {\n      throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n    }\n\n    this.scopes.delete(scope.trim());\n  };\n  /**\r\n   * Removes default scopes from set of scopes\r\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n   */\n\n\n  ScopeSet.prototype.removeOIDCScopes = function () {\n    var _this = this;\n\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      _this.scopes.delete(defaultScope);\n    });\n  };\n  /**\r\n   * Combines an array of scopes with the current set of scopes.\r\n   * @param otherScopes\r\n   */\n\n\n  ScopeSet.prototype.unionScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n\n    var unionScopes = new Set(); // Iterator in constructor not supported in IE11\n\n    otherScopes.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    this.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    return unionScopes;\n  };\n  /**\r\n   * Check if scopes intersect between this set and another.\r\n   * @param otherScopes\r\n   */\n\n\n  ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    } // Do not allow OIDC scopes to be the only intersecting scopes\n\n\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n\n    var unionScopes = this.unionScopeSets(otherScopes);\n    var sizeOtherScopes = otherScopes.getScopeCount();\n    var sizeThisScopes = this.getScopeCount();\n    var sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  };\n  /**\r\n   * Returns size of set of scopes.\r\n   */\n\n\n  ScopeSet.prototype.getScopeCount = function () {\n    return this.scopes.size;\n  };\n  /**\r\n   * Returns the scopes as an array of string values\r\n   */\n\n\n  ScopeSet.prototype.asArray = function () {\n    var array = [];\n    this.scopes.forEach(function (val) {\n      return array.push(val);\n    });\n    return array;\n  };\n  /**\r\n   * Prints scopes into a space-delimited string\r\n   */\n\n\n  ScopeSet.prototype.printScopes = function () {\n    if (this.scopes) {\n      var scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n\n    return \"\";\n  };\n  /**\r\n   * Prints scopes into a space-delimited lower-case string (used for caching)\r\n   */\n\n\n  ScopeSet.prototype.printScopesLowerCase = function () {\n    return this.printScopes().toLowerCase();\n  };\n\n  return ScopeSet;\n}();\n\nexport { ScopeSet };","map":{"version":3,"sources":["../../src/request/ScopeSet.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { OIDC_SCOPES } from \"../utils/Constants\";\n\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nexport class ScopeSet {\n    // Scopes as a Set of strings\n    private scopes: Set<string>;\n\n    constructor(inputScopes: Array<string>) {\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\n        const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach(scope => this.scopes.add(scope));\n    }\n\n    /**\n     * Factory method to create ScopeSet from space-delimited string\n     * @param inputScopeString\n     * @param appClientId\n     * @param scopesRequired\n     */\n    static fromString(inputScopeString: string): ScopeSet {\n        const scopeString = inputScopeString || \"\";\n        const inputScopes: Array<string> = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n\n    /**\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     */\n    private validateInputScopes(inputScopes: Array<string>): void {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw ClientConfigurationError.createEmptyScopesArrayError();\n        }\n    }\n\n    /**\n     * Check if a given scope is present in this set of scopes.\n     * @param scope\n     */\n    containsScope(scope: string): boolean {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n    }\n\n    /**\n     * Check if a set of scopes is present in this set of scopes.\n     * @param scopeSet\n     */\n    containsScopeSet(scopeSet: ScopeSet): boolean {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope)));\n    }\n\n    /**\n     * Check if set of scopes contains only the defaults\n     */\n    containsOnlyOIDCScopes(): boolean {\n        let defaultScopeCount = 0;\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n\n        return this.scopes.size === defaultScopeCount;\n    }\n\n    /**\n     * Appends single scope if passed\n     * @param newScope\n     */\n    appendScope(newScope: string): void {\n        if (!StringUtils.isEmpty(newScope)) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n\n    /**\n     * Appends multiple scopes if passed\n     * @param newScopes\n     */\n    appendScopes(newScopes: Array<string>): void {\n        try {\n            newScopes.forEach(newScope => this.appendScope(newScope));\n        } catch (e) {\n            throw ClientAuthError.createAppendScopeSetError(e);\n        }\n    }\n\n    /**\n     * Removes element from set of scopes.\n     * @param scope\n     */\n    removeScope(scope: string): void {\n        if (StringUtils.isEmpty(scope)) {\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n\n    /**\n     * Removes default scopes from set of scopes\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\n     */\n    removeOIDCScopes(): void {\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            this.scopes.delete(defaultScope);\n        });\n    }\n\n    /**\n     * Combines an array of scopes with the current set of scopes.\n     * @param otherScopes\n     */\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n        this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n\n    /**\n     * Check if scopes intersect between this set and another.\n     * @param otherScopes\n     */\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        \n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\n    }\n\n    /**\n     * Returns size of set of scopes.\n     */\n    getScopeCount(): number {\n        return this.scopes.size;\n    }\n\n    /**\n     * Returns the scopes as an array of string values\n     */\n    asArray(): Array<string> {\n        const array: Array<string> = [];\n        this.scopes.forEach(val => array.push(val));\n        return array;\n    }\n\n    /**\n     * Prints scopes into a space-delimited string\n     */\n    printScopes(): string {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return \"\";\n    }\n\n    /**\n     * Prints scopes into a space-delimited lower-case string (used for caching)\n     */\n    printScopesLowerCase(): string {\n        return this.printScopes().toLowerCase();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}