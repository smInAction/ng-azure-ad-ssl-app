{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Log message level.\r\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n  LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\n\n\nvar Logger =\n/** @class */\nfunction () {\n  function Logger(loggerOptions, packageName, packageVersion) {\n    // Current log level, defaults to info.\n    this.level = LogLevel.Info;\n\n    var defaultLoggerCallback = function defaultLoggerCallback() {};\n\n    this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\n    this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\n    this.level = loggerOptions.logLevel || LogLevel.Info;\n    this.correlationId = loggerOptions.correlationId || \"\";\n    this.packageName = packageName || Constants.EMPTY_STRING;\n    this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n  }\n  /**\r\n   * Create new Logger with existing configurations.\r\n   */\n\n\n  Logger.prototype.clone = function (packageName, packageVersion, correlationId) {\n    return new Logger({\n      loggerCallback: this.localCallback,\n      piiLoggingEnabled: this.piiLoggingEnabled,\n      logLevel: this.level,\n      correlationId: correlationId || this.correlationId\n    }, packageName, packageVersion);\n  };\n  /**\r\n   * Log message with required options.\r\n   */\n\n\n  Logger.prototype.logMessage = function (logMessage, options) {\n    if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) {\n      return;\n    }\n\n    var timestamp = new Date().toUTCString(); // Add correlationId to logs if set, correlationId provided on log messages take precedence\n\n    var logHeader;\n\n    if (!StringUtils.isEmpty(options.correlationId)) {\n      logHeader = \"[\" + timestamp + \"] : [\" + options.correlationId + \"]\";\n    } else if (!StringUtils.isEmpty(this.correlationId)) {\n      logHeader = \"[\" + timestamp + \"] : [\" + this.correlationId + \"]\";\n    } else {\n      logHeader = \"[\" + timestamp + \"]\";\n    }\n\n    var log = logHeader + \" : \" + this.packageName + \"@\" + this.packageVersion + \" : \" + LogLevel[options.logLevel] + \" - \" + logMessage; // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": \"\"}${options.context ? `:${options.context}` : \"\"}`)(logMessage);\n\n    this.executeCallback(options.logLevel, log, options.containsPii || false);\n  };\n  /**\r\n   * Execute callback with message.\r\n   */\n\n\n  Logger.prototype.executeCallback = function (level, message, containsPii) {\n    if (this.localCallback) {\n      this.localCallback(level, message, containsPii);\n    }\n  };\n  /**\r\n   * Logs error messages.\r\n   */\n\n\n  Logger.prototype.error = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs error messages with PII.\r\n   */\n\n\n  Logger.prototype.errorPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs warning messages.\r\n   */\n\n\n  Logger.prototype.warning = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs warning messages with PII.\r\n   */\n\n\n  Logger.prototype.warningPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs info messages.\r\n   */\n\n\n  Logger.prototype.info = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs info messages with PII.\r\n   */\n\n\n  Logger.prototype.infoPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs verbose messages.\r\n   */\n\n\n  Logger.prototype.verbose = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs verbose messages with PII.\r\n   */\n\n\n  Logger.prototype.verbosePii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs trace messages.\r\n   */\n\n\n  Logger.prototype.trace = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs trace messages with PII.\r\n   */\n\n\n  Logger.prototype.tracePii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Returns whether PII Logging is enabled or not.\r\n   */\n\n\n  Logger.prototype.isPiiLoggingEnabled = function () {\n    return this.piiLoggingEnabled || false;\n  };\n\n  return Logger;\n}();\n\nexport { LogLevel, Logger };","map":{"version":3,"sources":["../../src/logger/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { LoggerOptions } from \"../config/ClientConfiguration\";\nimport { Constants } from \"../utils/Constants\";\n\n/**\n * Options for logger messages.\n */\nexport type LoggerMessageOptions = {\n    logLevel: LogLevel,\n    containsPii?: boolean,\n    context?: string,\n    correlationId?: string\n};\n\n/**\n * Log message level.\n */\nexport enum LogLevel {\n    Error,\n    Warning,\n    Info,\n    Verbose,\n    Trace\n}\n\n/**\n * Callback to send the messages to.\n */\nexport interface ILoggerCallback {\n    (level: LogLevel, message: string, containsPii: boolean): void;\n}\n\n/**\n * Class which facilitates logging of messages to a specific place.\n */\nexport class Logger {\n\n    // Correlation ID for request, usually set by user.\n    private correlationId: string;\n\n    // Current log level, defaults to info.\n    private level: LogLevel = LogLevel.Info;\n\n    // Boolean describing whether PII logging is allowed.\n    private piiLoggingEnabled: boolean;\n\n    // Callback to send messages to.\n    private localCallback: ILoggerCallback;\n\n    // Package name implementing this logger\n    private packageName: string;\n\n    // Package version implementing this logger\n    private packageVersion: string;\n\n    constructor(loggerOptions: LoggerOptions, packageName?: string, packageVersion?: string) {\n        const defaultLoggerCallback = () => {};\n        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\n        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\n        this.level = loggerOptions.logLevel || LogLevel.Info;\n        this.correlationId = loggerOptions.correlationId || \"\";\n\n        this.packageName = packageName || Constants.EMPTY_STRING;\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Create new Logger with existing configurations.\n     */\n    public clone(packageName: string, packageVersion: string, correlationId?: string): Logger {\n        return new Logger({loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level, correlationId: correlationId || this.correlationId}, packageName, packageVersion);\n    }\n\n    /**\n     * Log message with required options.\n     */\n    private logMessage(logMessage: string, options: LoggerMessageOptions): void {\n        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {\n            return;\n        }\n        const timestamp = new Date().toUTCString();\n\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\n        let logHeader: string;\n        if (!StringUtils.isEmpty(options.correlationId)) {\n            logHeader = `[${timestamp}] : [${options.correlationId}]`;\n        } else if (!StringUtils.isEmpty(this.correlationId)) {\n            logHeader = `[${timestamp}] : [${this.correlationId}]`;\n        } else {\n            logHeader = `[${timestamp}]`;\n        }\n\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": \"\"}${options.context ? `:${options.context}` : \"\"}`)(logMessage);\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\n    }\n\n    /**\n     * Execute callback with message.\n     */\n    executeCallback(level: LogLevel, message: string, containsPii: boolean): void {\n        if (this.localCallback) {\n            this.localCallback(level, message, containsPii);\n        }\n    }\n\n    /**\n     * Logs error messages.\n     */\n    error(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs error messages with PII.\n     */\n    errorPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs warning messages.\n     */\n    warning(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs warning messages with PII.\n     */\n    warningPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs info messages.\n     */\n    info(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs info messages with PII.\n     */\n    infoPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs verbose messages.\n     */\n    verbose(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs verbose messages with PII.\n     */\n    verbosePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs trace messages.\n     */\n    trace(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs trace messages with PII.\n     */\n    tracePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Returns whether PII Logging is enabled or not.\n     */\n    isPiiLoggingEnabled(): boolean {\n        return this.piiLoggingEnabled || false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}