{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { ResponseCodes, Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RegionDiscovery =\n/** @class */\nfunction () {\n  function RegionDiscovery(networkInterface) {\n    this.networkInterface = networkInterface;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n\n\n  RegionDiscovery.prototype.detectRegion = function (environmentRegion) {\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, response, latestIMDSVersion, response_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            autodetectedRegionName = environmentRegion;\n            if (!!autodetectedRegionName) return [3\n            /*break*/\n            , 7];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.getRegionFromIMDS(Constants.IMDS_VERSION)];\n\n          case 2:\n            response = _a.sent();\n\n            if (response.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = response.body;\n            }\n\n            if (!(response.status === ResponseCodes.httpBadRequest)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.getCurrentVersion()];\n\n          case 3:\n            latestIMDSVersion = _a.sent();\n\n            if (!latestIMDSVersion) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , this.getRegionFromIMDS(latestIMDSVersion)];\n\n          case 4:\n            response_1 = _a.sent();\n\n            if (response_1.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = response_1.body;\n            }\n\n            _a.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 7:\n            return [2\n            /*return*/\n            , autodetectedRegionName || null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n\n\n  RegionDiscovery.prototype.getRegionFromIMDS = function (version) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT)];\n      });\n    });\n  };\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n\n\n  RegionDiscovery.prototype.getCurrentVersion = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", RegionDiscovery.IMDS_OPTIONS)];\n\n          case 1:\n            response = _a.sent(); // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n              return [2\n              /*return*/\n              , response.body[\"newest-versions\"][0]];\n            }\n\n            return [2\n            /*return*/\n            , null];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Options for the IMDS endpoint request\n\n\n  RegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n      \"Metadata\": \"true\"\n    }\n  };\n  return RegionDiscovery;\n}();\n\nexport { RegionDiscovery };","map":{"version":3,"sources":["../../src/authority/RegionDiscovery.ts"],"names":[],"mappings":";;;;;AAAA;;;;;;;;AAgBI,WAAA,eAAA,CAAY,gBAAZ,EAA4C;AACxC,SAAK,gBAAL,GAAwB,gBAAxB;AACH;;;;;;;;AAOY,EAAA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAb,UAA0B,iBAA1B,EAA+D;;;;;;AAEvD,YAAA,sBAAsB,GAAG,iBAAzB;iBAGA,CAAC,sB,EAAD,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;;;;AAEqB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,CAAuB,SAAS,CAAC,YAAjC,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;AACN,gBAAI,QAAQ,CAAC,MAAT,KAAoB,aAAa,CAAC,WAAtC,EAAmD;AAC/C,cAAA,sBAAsB,GAAG,QAAQ,CAAC,IAAlC;AACH;;kBAEG,QAAQ,CAAC,MAAT,KAAoB,aAAa,CAAC,c,GAAlC,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AAC0B,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,EAAN,CAAA;;;AAApB,YAAA,iBAAiB,GAAG,EAAA,CAAA,IAAA,EAApB;;AACN,gBAAI,CAAC,iBAAL,EAAwB;AACpB,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAP,CAAA;AACH;;AAEgB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,CAAuB,iBAAvB,CAAN,CAAA;;;AAAX,YAAA,UAAA,GAAW,EAAA,CAAA,IAAA,EAAX;;AACN,gBAAI,UAAQ,CAAC,MAAT,KAAoB,aAAa,CAAC,WAAtC,EAAmD;AAC/C,cAAA,sBAAsB,GAAG,UAAQ,CAAC,IAAlC;AACH;;;;;;;;;;;;AAGL,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAP,CAAA;;;AAIR,mBAAA,CAAA;AAAA;AAAA,cAAO,sBAAsB,IAAI,IAAjC,CAAA;;;;AACH,GA7BY;;;;;;;;;AAqCC,EAAA,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAd,UAAgC,OAAhC,EAA+C;;;AAC3C,eAAA,CAAA;AAAA;AAAA,UAAO,KAAK,gBAAL,CAAsB,mBAAtB,CAAqD,SAAS,CAAC,aAAV,GAAuB,eAAvB,GAAuC,OAAvC,GAA8C,cAAnG,EAAmH,eAAe,CAAC,YAAnI,EAAiJ,SAAS,CAAC,YAA3J,CAAP,CAAA;;;AACH,GAFa;;;;;;;;AASA,EAAA,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAd,YAAA;;;;;;;;AAEyB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,gBAAL,CAAsB,mBAAtB,CAA8D,SAAS,CAAC,aAAV,GAAuB,cAArF,EAAqG,eAAe,CAAC,YAArH,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX,C;;AAGN,gBAAI,QAAQ,CAAC,MAAT,KAAoB,aAAa,CAAC,cAAlC,IAAoD,QAAQ,CAAC,IAA7D,IAAqE,QAAQ,CAAC,IAAT,CAAc,iBAAd,CAArE,IAAyG,QAAQ,CAAC,IAAT,CAAc,iBAAd,EAAiC,MAAjC,GAA0C,CAAvJ,EAA0J;AACtJ,qBAAA,CAAA;AAAA;AAAA,gBAAO,QAAQ,CAAC,IAAT,CAAc,iBAAd,EAAiC,CAAjC,CAAP,CAAA;AACH;;AAED,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAP,CAAA;;;;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAP,CAAA;;;;;;;;;AAEP,GAba,C;;;AAzDG,EAAA,eAAA,CAAA,YAAA,GAAe;AAAC,IAAA,OAAO,EAAE;AAAC,kBAAY;AAAb;AAAV,GAAf;AAuErB,SAAA,eAAA;AA3EA,C","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\nimport { Constants, ResponseCodes } from \"../utils/Constants\";\n\nexport class RegionDiscovery {\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Options for the IMDS endpoint request\n    protected static IMDS_OPTIONS = {headers: {\"Metadata\": \"true\"}};\n\n    constructor(networkInterface: INetworkModule) {\n        this.networkInterface = networkInterface;\n    }\n\n    /**\n     * Detect the region from the application's environment.\n     * \n     * @returns Promise<string | null>\n     */\n    public async detectRegion(environmentRegion: string | undefined): Promise<string | null> {\n        // Initialize auto detected region with the region from the envrionment \n        let autodetectedRegionName = environmentRegion;\n\n        // Call the local IMDS endpoint for applications running in azure vms\n        if (!autodetectedRegionName) {\n            try {\n                const response = await this.getRegionFromIMDS(Constants.IMDS_VERSION);\n                if (response.status === ResponseCodes.httpSuccess) {\n                    autodetectedRegionName = response.body;\n                } \n                \n                if (response.status === ResponseCodes.httpBadRequest) {\n                    const latestIMDSVersion = await this.getCurrentVersion();\n                    if (!latestIMDSVersion) {\n                        return null;\n                    }\n\n                    const response = await this.getRegionFromIMDS(latestIMDSVersion);\n                    if (response.status === ResponseCodes.httpSuccess) {\n                        autodetectedRegionName = response.body;\n                    }\n                } \n            } catch(e) {\n                return null;\n            } \n        }\n\n        return autodetectedRegionName || null;\n    }\n\n    /**\n     * Make the call to the IMDS endpoint\n     * \n     * @param imdsEndpointUrl\n     * @returns Promise<NetworkResponse<string>>\n     */\n    private async getRegionFromIMDS(version: string): Promise<NetworkResponse<string>> {\n        return this.networkInterface.sendGetRequestAsync<string>(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT);\n    }\n\n    /**\n     * Get the most recent version of the IMDS endpoint available\n     *  \n     * @returns Promise<string | null>\n     */\n    private async getCurrentVersion(): Promise<string | null> {\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(`${Constants.IMDS_ENDPOINT}?format=json`, RegionDiscovery.IMDS_OPTIONS);\n\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n                return response.body[\"newest-versions\"][0];\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}