{"ast":null,"code":"/*! @azure/msal-browser v2.15.0 2021-06-29 */\n'use strict';\n\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\n\nvar Base64Encode =\n/** @class */\nfunction () {\n  function Base64Encode() {}\n  /**\r\n   * Returns URL Safe b64 encoded string from a plaintext string.\r\n   * @param input\r\n   */\n\n\n  Base64Encode.prototype.urlEncode = function (input) {\n    return encodeURIComponent(this.encode(input).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\"));\n  };\n  /**\r\n   * Returns URL Safe b64 encoded string from an int8Array.\r\n   * @param inputArr\r\n   */\n\n\n  Base64Encode.prototype.urlEncodeArr = function (inputArr) {\n    return this.base64EncArr(inputArr).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n  };\n  /**\r\n   * Returns b64 encoded string from plaintext string.\r\n   * @param input\r\n   */\n\n\n  Base64Encode.prototype.encode = function (input) {\n    var inputUtf8Arr = BrowserStringUtils.stringToUtf8Arr(input);\n    return this.base64EncArr(inputUtf8Arr);\n  };\n  /**\r\n   * Base64 encode byte array\r\n   * @param aBytes\r\n   */\n\n\n  Base64Encode.prototype.base64EncArr = function (aBytes) {\n    var eqLen = (3 - aBytes.length % 3) % 3;\n    var sB64Enc = \"\";\n\n    for (var nMod3 = void 0, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {\n      nMod3 = nIdx % 3;\n      /* Uncomment the following line in order to split the output in lines 76-character long: */\n\n      /*\r\n       *if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += \"\\r\\n\"; }\r\n       */\n\n      nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);\n\n      if (nMod3 === 2 || aBytes.length - nIdx === 1) {\n        sB64Enc += String.fromCharCode(this.uint6ToB64(nUint24 >>> 18 & 63), this.uint6ToB64(nUint24 >>> 12 & 63), this.uint6ToB64(nUint24 >>> 6 & 63), this.uint6ToB64(nUint24 & 63));\n        nUint24 = 0;\n      }\n    }\n\n    return eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? \"=\" : \"==\");\n  };\n  /**\r\n   * Base64 string to array encoding helper\r\n   * @param nUint6\r\n   */\n\n\n  Base64Encode.prototype.uint6ToB64 = function (nUint6) {\n    return nUint6 < 26 ? nUint6 + 65 : nUint6 < 52 ? nUint6 + 71 : nUint6 < 62 ? nUint6 - 4 : nUint6 === 62 ? 43 : nUint6 === 63 ? 47 : 65;\n  };\n\n  return Base64Encode;\n}();\n\nexport { Base64Encode };","map":{"version":3,"sources":["../../src/encode/Base64Encode.ts"],"names":[],"mappings":";;;;AAAA;;;;;AAOA;;;;;;;;AAIA,WAAA,YAAA,GAAA,CAgFC;;;;;;;AA1EG,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAAuB;AACnB,WAAO,kBAAkB,CAAC,KAAK,MAAL,CAAY,KAAZ,EACrB,OADqB,CACb,IADa,EACP,EADO,EAErB,OAFqB,CAEb,KAFa,EAEN,GAFM,EAGrB,OAHqB,CAGb,KAHa,EAGN,GAHM,CAAD,CAAzB;AAIH,GALD;;;;;;;AAWA,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,QAAb,EAAiC;AAC7B,WAAO,KAAK,YAAL,CAAkB,QAAlB,EACF,OADE,CACM,IADN,EACY,EADZ,EAEF,OAFE,CAEM,KAFN,EAEa,GAFb,EAGF,OAHE,CAGM,KAHN,EAGa,GAHb,CAAP;AAIH,GALD;;;;;;;AAWA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAAoB;AAChB,QAAM,YAAY,GAAG,kBAAkB,CAAC,eAAnB,CAAmC,KAAnC,CAArB;AACA,WAAO,KAAK,YAAL,CAAkB,YAAlB,CAAP;AACH,GAHD;;;;;;;AASQ,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,MAArB,EAAuC;AACnC,QAAM,KAAK,GAAG,CAAC,IAAK,MAAM,CAAC,MAAP,GAAgB,CAAtB,IAA4B,CAA1C;AACA,QAAI,OAAO,GAAG,EAAd;;AAEA,SAAK,IAAI,KAAK,GAAA,KAAA,CAAT,EAAW,IAAI,GAAG,MAAM,CAAC,MAAzB,EAAiC,OAAO,GAAG,CAA3C,EAA8C,IAAI,GAAG,CAA1D,EAA6D,IAAI,GAAG,IAApE,EAA0E,IAAI,EAA9E,EAAkF;AAC9E,MAAA,KAAK,GAAG,IAAI,GAAG,CAAf;;;;;;;AAKA,MAAA,OAAO,IAAI,MAAM,CAAC,IAAD,CAAN,KAAiB,OAAO,KAAP,GAAe,EAAhC,CAAX;;AACA,UAAI,KAAK,KAAK,CAAV,IAAe,MAAM,CAAC,MAAP,GAAgB,IAAhB,KAAyB,CAA5C,EAA+C;AAC3C,QAAA,OAAO,IAAI,MAAM,CAAC,YAAP,CACP,KAAK,UAAL,CAAgB,OAAO,KAAK,EAAZ,GAAiB,EAAjC,CADO,EAEP,KAAK,UAAL,CAAgB,OAAO,KAAK,EAAZ,GAAiB,EAAjC,CAFO,EAGP,KAAK,UAAL,CAAgB,OAAO,KAAK,CAAZ,GAAgB,EAAhC,CAHO,EAIP,KAAK,UAAL,CAAgB,OAAO,GAAG,EAA1B,CAJO,CAAX;AAMA,QAAA,OAAO,GAAG,CAAV;AACH;AACJ;;AAED,WAAQ,KAAK,KAAK,CAAV,GAAc,OAAd,GAAwB,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,OAAO,CAAC,MAAR,GAAiB,KAAtC,KAAgD,KAAK,KAAK,CAAV,GAAc,GAAd,GAAoB,IAApE,CAAhC;AACH,GAvBO;;;;;;;AA6BA,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAoB,MAApB,EAAkC;AAC9B,WAAO,MAAM,GAAG,EAAT,GACH,MAAM,GAAG,EADN,GAED,MAAM,GAAG,EAAT,GACE,MAAM,GAAG,EADX,GAEI,MAAM,GAAG,EAAT,GACE,MAAM,GAAG,CADX,GAEI,MAAM,KAAK,EAAX,GACE,EADF,GAEI,MAAM,KAAK,EAAX,GACE,EADF,GAGE,EAXpB;AAYH,GAbO;;AAcZ,SAAA,YAAA;AAAC,C","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\n\n/**\n * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n */\nexport class Base64Encode {\n    \n    /**\n     * Returns URL Safe b64 encoded string from a plaintext string.\n     * @param input \n     */\n    urlEncode(input: string): string {\n        return encodeURIComponent(this.encode(input)\n            .replace(/=/g, \"\")\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\"));\n    }\n\n    /**\n     * Returns URL Safe b64 encoded string from an int8Array.\n     * @param inputArr \n     */\n    urlEncodeArr(inputArr: Uint8Array): string {\n        return this.base64EncArr(inputArr)\n            .replace(/=/g, \"\")\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\");\n    }\n\n    /**\n     * Returns b64 encoded string from plaintext string.\n     * @param input \n     */\n    encode(input: string): string {\n        const inputUtf8Arr = BrowserStringUtils.stringToUtf8Arr(input);\n        return this.base64EncArr(inputUtf8Arr);\n    }\n\n    /**\n     * Base64 encode byte array\n     * @param aBytes \n     */\n    private base64EncArr(aBytes: Uint8Array): string {  \n        const eqLen = (3 - (aBytes.length % 3)) % 3;\n        let sB64Enc = \"\";\n      \n        for (let nMod3, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {\n            nMod3 = nIdx % 3;\n            /* Uncomment the following line in order to split the output in lines 76-character long: */\n            /*\n             *if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += \"\\r\\n\"; }\n             */\n            nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);\n            if (nMod3 === 2 || aBytes.length - nIdx === 1) {\n                sB64Enc += String.fromCharCode(\n                    this.uint6ToB64(nUint24 >>> 18 & 63), \n                    this.uint6ToB64(nUint24 >>> 12 & 63), \n                    this.uint6ToB64(nUint24 >>> 6 & 63), \n                    this.uint6ToB64(nUint24 & 63)\n                );\n                nUint24 = 0;\n            }\n        }\n\n        return  eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? \"=\" : \"==\");\n    }\n\n    /**\n     * Base64 string to array encoding helper\n     * @param nUint6 \n     */\n    private uint6ToB64 (nUint6: number): number {\n        return nUint6 < 26 ?\n            nUint6 + 65\n            : nUint6 < 52 ?\n                nUint6 + 71\n                : nUint6 < 62 ?\n                    nUint6 - 4\n                    : nUint6 === 62 ?\n                        43\n                        : nUint6 === 63 ?\n                            47\n                            :\n                            65;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}