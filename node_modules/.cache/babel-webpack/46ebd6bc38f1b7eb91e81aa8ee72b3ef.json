{"ast":null,"code":"/*! @azure/msal-common v4.4.0 2021-06-29 */\n'use strict';\n\nimport { __extends } from '../../_virtual/_tslib.js';\nimport { CredentialEntity } from './CredentialEntity.js';\nimport { CredentialType, AuthenticationScheme } from '../../utils/Constants.js';\nimport { TimeUtils } from '../../utils/TimeUtils.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { AuthToken } from '../../account/AuthToken.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * ACCESS_TOKEN Credential Type\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      cachedAt: Absolute device time when entry was created in the cache.\r\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\r\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\r\n *      keyId: used for POP and SSH tokenTypes\r\n *      tokenType: Type of the token issued. Usually \"Bearer\"\r\n * }\r\n */\n\nvar AccessTokenEntity =\n/** @class */\nfunction (_super) {\n  __extends(AccessTokenEntity, _super);\n\n  function AccessTokenEntity() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Create AccessTokenEntity\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param accessToken\r\n   * @param clientId\r\n   * @param tenantId\r\n   * @param scopes\r\n   * @param expiresOn\r\n   * @param extExpiresOn\r\n   */\n\n\n  AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, oboAssertion) {\n    var _a;\n\n    var atEntity = new AccessTokenEntity();\n    atEntity.homeAccountId = homeAccountId;\n    atEntity.credentialType = CredentialType.ACCESS_TOKEN;\n    atEntity.secret = accessToken;\n    var currentTime = TimeUtils.nowSeconds();\n    atEntity.cachedAt = currentTime.toString();\n    /*\r\n     * Token expiry time.\r\n     * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\r\n     */\n\n    atEntity.expiresOn = expiresOn.toString();\n    atEntity.extendedExpiresOn = extExpiresOn.toString();\n\n    if (refreshOn) {\n      atEntity.refreshOn = refreshOn.toString();\n    }\n\n    atEntity.environment = environment;\n    atEntity.clientId = clientId;\n    atEntity.realm = tenantId;\n    atEntity.target = scopes;\n    atEntity.oboAssertion = oboAssertion;\n    atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType; // Create Access Token With AuthScheme instead of regular access token\n\n    if (atEntity.tokenType === AuthenticationScheme.POP) {\n      atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME; // Make sure keyId is present and add it to credential\n\n      var tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\n\n      if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {\n        throw ClientAuthError.createTokenClaimsRequiredError();\n      }\n\n      atEntity.keyId = tokenClaims.cnf.kid;\n    }\n\n    return atEntity;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n\n\n  AccessTokenEntity.isAccessTokenEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n  };\n\n  return AccessTokenEntity;\n}(CredentialEntity);\n\nexport { AccessTokenEntity };","map":{"version":3,"sources":["../../../src/cache/entities/AccessTokenEntity.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CredentialEntity } from \"./CredentialEntity\";\nimport { CredentialType, AuthenticationScheme } from \"../../utils/Constants\";\nimport { TimeUtils } from \"../../utils/TimeUtils\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport { ICrypto } from \"../../crypto/ICrypto\";\nimport { TokenClaims } from \"../../account/TokenClaims\";\nimport { AuthToken } from \"../../account/AuthToken\";\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\n\n/**\n * ACCESS_TOKEN Credential Type\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, usually only used for refresh tokens\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n *      cachedAt: Absolute device time when entry was created in the cache.\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\n *      keyId: used for POP and SSH tokenTypes\n *      tokenType: Type of the token issued. Usually \"Bearer\"\n * }\n */\nexport class AccessTokenEntity extends CredentialEntity {\n    realm: string;\n    target: string;\n    cachedAt: string;\n    expiresOn: string;\n    extendedExpiresOn?: string;\n    refreshOn?: string;\n    keyId?: string; // for POP and SSH tokenTypes\n    tokenType?: string;\n\n    /**\n     * Create AccessTokenEntity\n     * @param homeAccountId\n     * @param environment\n     * @param accessToken\n     * @param clientId\n     * @param tenantId\n     * @param scopes\n     * @param expiresOn\n     * @param extExpiresOn\n     */\n    static createAccessTokenEntity(\n        homeAccountId: string,\n        environment: string,\n        accessToken: string,\n        clientId: string,\n        tenantId: string,\n        scopes: string,\n        expiresOn: number,\n        extExpiresOn: number,\n        cryptoUtils: ICrypto,\n        refreshOn?: number,\n        tokenType?: string,\n        oboAssertion?: string\n    ): AccessTokenEntity {\n        const atEntity: AccessTokenEntity = new AccessTokenEntity();\n\n        atEntity.homeAccountId = homeAccountId;\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN;\n        atEntity.secret = accessToken;\n\n        const currentTime = TimeUtils.nowSeconds();\n        atEntity.cachedAt = currentTime.toString();\n\n        /*\n         * Token expiry time.\n         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\n         */\n        atEntity.expiresOn = expiresOn.toString();\n        atEntity.extendedExpiresOn = extExpiresOn.toString();\n        if (refreshOn) {\n            atEntity.refreshOn = refreshOn.toString();\n        }\n\n        atEntity.environment = environment;\n        atEntity.clientId = clientId;\n        atEntity.realm = tenantId;\n        atEntity.target = scopes;\n        atEntity.oboAssertion = oboAssertion;\n\n        atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType;\n\n        // Create Access Token With AuthScheme instead of regular access token\n        if (atEntity.tokenType === AuthenticationScheme.POP) {\n            atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n            // Make sure keyId is present and add it to credential\n            const tokenClaims: TokenClaims | null = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\n            if (!tokenClaims?.cnf?.kid) {\n                throw ClientAuthError.createTokenClaimsRequiredError();\n            }\n            atEntity.keyId = tokenClaims.cnf.kid;\n        }\n\n        return atEntity;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccessTokenEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"credentialType\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"secret\") &&\n            entity.hasOwnProperty(\"target\") &&\n            (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME)\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}