{"ast":null,"code":"/*! @azure/msal-browser v2.15.0 2021-06-29 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar EventHandler =\n/** @class */\nfunction () {\n  function EventHandler(logger, browserCrypto) {\n    this.eventCallbacks = new Map();\n    this.logger = logger;\n    this.browserCrypto = browserCrypto;\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback\r\n   */\n\n\n  EventHandler.prototype.addEventCallback = function (callback) {\n    if (typeof window !== \"undefined\") {\n      var callbackId = this.browserCrypto.createNewGuid();\n      this.eventCallbacks.set(callbackId, callback);\n      this.logger.verbose(\"Event callback registered with id: \" + callbackId);\n      return callbackId;\n    }\n\n    return null;\n  };\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n\n\n  EventHandler.prototype.removeEventCallback = function (callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(\"Event callback \" + callbackId + \" removed.\");\n  };\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n\n\n  EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {\n    var _this = this;\n\n    if (typeof window !== \"undefined\") {\n      var message_1 = {\n        eventType: eventType,\n        interactionType: interactionType || null,\n        payload: payload || null,\n        error: error || null,\n        timestamp: Date.now()\n      };\n      this.logger.info(\"Emitting event: \" + eventType);\n      this.eventCallbacks.forEach(function (callback, callbackId) {\n        _this.logger.verbose(\"Emitting event to callback \" + callbackId + \": \" + eventType);\n\n        callback.apply(null, [message_1]);\n      });\n    }\n  };\n\n  return EventHandler;\n}();\n\nexport { EventHandler };","map":{"version":3,"sources":["../../src/event/EventHandler.ts"],"names":[],"mappings":";;AAAA;;;;;;;;AAgBI,WAAA,YAAA,CAAY,MAAZ,EAA4B,aAA5B,EAAkD;AAC9C,SAAK,cAAL,GAAsB,IAAI,GAAJ,EAAtB;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,aAAL,GAAqB,aAArB;AACH;;;;;;;AAMD,EAAA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,QAAjB,EAAgD;AAC5C,QAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,UAAM,UAAU,GAAG,KAAK,aAAL,CAAmB,aAAnB,EAAnB;AACA,WAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,EAAoC,QAApC;AACA,WAAK,MAAL,CAAY,OAAZ,CAAoB,wCAAsC,UAA1D;AAEA,aAAO,UAAP;AACH;;AAED,WAAO,IAAP;AACH,GAVD;;;;;;;AAgBA,EAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,UAApB,EAAsC;AAClC,SAAK,cAAL,CAAoB,MAApB,CAA2B,UAA3B;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,oBAAkB,UAAlB,GAA4B,WAAhD;AACH,GAHD;;;;;;;;;;AAYA,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,SAAV,EAAgC,eAAhC,EAAmE,OAAnE,EAA2F,KAA3F,EAA6G;AAA7G,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,UAAM,SAAO,GAAiB;AAC1B,QAAA,SAAS,EAAE,SADe;AAE1B,QAAA,eAAe,EAAE,eAAe,IAAI,IAFV;AAG1B,QAAA,OAAO,EAAE,OAAO,IAAI,IAHM;AAI1B,QAAA,KAAK,EAAE,KAAK,IAAI,IAJU;AAK1B,QAAA,SAAS,EAAE,IAAI,CAAC,GAAL;AALe,OAA9B;AAQA,WAAK,MAAL,CAAY,IAAZ,CAAiB,qBAAmB,SAApC;AAEA,WAAK,cAAL,CAAoB,OAApB,CAA4B,UAAC,QAAD,EAAkC,UAAlC,EAAoD;AAC5E,QAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,gCAA8B,UAA9B,GAAwC,IAAxC,GAA6C,SAAjE;;AACA,QAAA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,SAAD,CAArB;AACH,OAHD;AAIH;AACJ,GAjBD;;AAmBJ,SAAA,YAAA;AAAC,C","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, Logger } from \"@azure/msal-common\";\nimport { InteractionType } from \"../utils/BrowserConstants\";\nimport { EventCallbackFunction, EventError, EventMessage, EventPayload } from \"./EventMessage\";\nimport { EventType } from \"./EventType\";\n\nexport class EventHandler {\n    // Callback for subscribing to events\n    private eventCallbacks: Map<string, EventCallbackFunction>;\n    private logger: Logger;\n    private browserCrypto: ICrypto;\n\n    constructor(logger: Logger, browserCrypto: ICrypto) {\n        this.eventCallbacks = new Map();\n        this.logger = logger;\n        this.browserCrypto = browserCrypto;\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        if (typeof window !== \"undefined\") {\n            const callbackId = this.browserCrypto.createNewGuid();\n            this.eventCallbacks.set(callbackId, callback);\n            this.logger.verbose(`Event callback registered with id: ${callbackId}`);\n    \n            return callbackId;\n        }\n        \n        return null;\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventCallbacks.delete(callbackId);\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\n    }\n\n    /**\n     * Emits events by calling callback with event message\n     * @param eventType\n     * @param interactionType\n     * @param payload\n     * @param error\n     */\n    emitEvent(eventType: EventType, interactionType?: InteractionType, payload?: EventPayload, error?: EventError): void {\n        if (typeof window !== \"undefined\") {\n            const message: EventMessage = {\n                eventType: eventType,\n                interactionType: interactionType || null,\n                payload: payload || null,\n                error: error || null,\n                timestamp: Date.now()\n            };\n\n            this.logger.info(`Emitting event: ${eventType}`);\n\n            this.eventCallbacks.forEach((callback: EventCallbackFunction, callbackId: string) => {\n                this.logger.verbose(`Emitting event to callback ${callbackId}: ${eventType}`);\n                callback.apply(null, [message]);\n            });\n        }\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}