{"version":3,"file":"azure-msal-angular.js","sources":["../../src/constants.ts","../../src/packageMetadata.ts","../../src/msal.service.ts","../../src/msal.broadcast.service.ts","../../src/msal.guard.ts","../../src/msal.interceptor.ts","../../src/msal.redirect.component.ts","../../src/msal.module.ts","../../src/msal.navigation.client.ts","../../src/public-api.ts","../../src/azure-msal-angular.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InjectionToken } from \"@angular/core\";\n\nexport const MSAL_INSTANCE = new InjectionToken<string>(\"MSAL_INSTANCE\");\n\nexport const MSAL_GUARD_CONFIG = new InjectionToken<string>(\"MSAL_GUARD_CONFIG\");\n\nexport const MSAL_INTERCEPTOR_CONFIG = new InjectionToken<string>(\"MSAL_INTERCEPTOR_CONFIG\");\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-angular\";\nexport const version = \"2.0.1\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Inject, Injectable } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport {\n    IPublicClientApplication,\n    EndSessionRequest,\n    EndSessionPopupRequest,\n    AuthenticationResult,\n    RedirectRequest,\n    SilentRequest,\n    PopupRequest,\n    SsoSilentRequest,\n    Logger,\n    WrapperSKU\n} from \"@azure/msal-browser\";\nimport { MSAL_INSTANCE } from \"./constants\";\nimport { Observable, from } from \"rxjs\";\nimport { IMsalService } from \"./IMsalService\";\nimport { name, version } from \"./packageMetadata\";\n\n@Injectable()\nexport class MsalService implements IMsalService {\n    private redirectHash: string;\n    private logger: Logger;\n\n    constructor(\n        @Inject(MSAL_INSTANCE) public instance: IPublicClientApplication,\n        private location: Location\n    ) {\n        const hash = this.location.path(true).split(\"#\").pop();\n        if (hash) {\n            this.redirectHash = `#${hash}`;\n        }\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\n    }\n\n    acquireTokenPopup(request: PopupRequest): Observable<AuthenticationResult> {\n        return from(this.instance.acquireTokenPopup(request));\n    }\n    acquireTokenRedirect(request: RedirectRequest): Observable<void> {\n        return from(this.instance.acquireTokenRedirect(request));\n    }\n    acquireTokenSilent(silentRequest: SilentRequest): Observable<AuthenticationResult> {\n        return from(this.instance.acquireTokenSilent(silentRequest));\n    }\n    handleRedirectObservable(hash?: string): Observable<AuthenticationResult> {\n        return from(this.instance.handleRedirectPromise(hash || this.redirectHash));\n    }\n    loginPopup(request?: PopupRequest): Observable<AuthenticationResult> {\n        return from(this.instance.loginPopup(request));\n    }\n    loginRedirect(request?: RedirectRequest): Observable<void> {\n        return from(this.instance.loginRedirect(request));\n    }\n    logout(logoutRequest?: EndSessionRequest): Observable<void> {\n        return from(this.instance.logout(logoutRequest));\n    }\n    logoutRedirect(logoutRequest?: EndSessionRequest): Observable<void> {\n        return from(this.instance.logoutRedirect(logoutRequest));\n    }\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Observable<void> {\n        return from(this.instance.logoutPopup(logoutRequest));\n    }\n    ssoSilent(request: SsoSilentRequest): Observable<AuthenticationResult> {\n        return from(this.instance.ssoSilent(request));\n    }\n    /**\n     * Gets logger for msal-angular.\n     * If no logger set, returns logger instance created with same options as msal-browser\n     */\n    getLogger(): Logger {\n        if (!this.logger) {\n            this.logger = this.instance.getLogger().clone(name, version);\n        }\n        return this.logger;\n    }\n    // Create a logger instance for msal-angular with the same options as msal-browser\n    setLogger(logger: Logger): void {\n        this.logger = logger.clone(name, version);\n        this.instance.setLogger(logger);\n    }\n\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Inject, Injectable } from \"@angular/core\";\nimport { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { MSAL_INSTANCE } from \"./constants\";\nimport { EventMessage, EventMessageUtils, IPublicClientApplication, InteractionStatus } from \"@azure/msal-browser\";\nimport { MsalService } from \"./msal.service\";\n\n@Injectable()\nexport class MsalBroadcastService {\n    private _msalSubject: Subject<EventMessage>;\n    public msalSubject$: Observable<EventMessage>;\n    private _inProgress: BehaviorSubject<InteractionStatus>;\n    public inProgress$: Observable<InteractionStatus>;\n\n    constructor(\n        @Inject(MSAL_INSTANCE) private msalInstance: IPublicClientApplication,\n        private authService: MsalService\n    ) {\n        this._msalSubject = new Subject<EventMessage>();\n        this.msalSubject$  = this._msalSubject.asObservable();\n\n        // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\n        this._inProgress = new BehaviorSubject<InteractionStatus>(InteractionStatus.Startup);\n        this.inProgress$ = this._inProgress.asObservable();\n\n        this.msalInstance.addEventCallback((message: EventMessage) => {\n            this._msalSubject.next(message);\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message);\n            if (status !== null) {\n                this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress to ${status}`);\n                this._inProgress.next(status);\n            }\n        });\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, CanLoad, UrlTree, Router } from \"@angular/router\";\nimport { MsalService } from \"./msal.service\";\nimport { Injectable, Inject, VERSION } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport { InteractionType, BrowserConfigurationAuthError, BrowserUtils, UrlString, PopupRequest, RedirectRequest, AuthenticationResult } from \"@azure/msal-browser\";\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\nimport { MSAL_GUARD_CONFIG } from \"./constants\";\nimport { concatMap, catchError, map } from \"rxjs/operators\";\nimport { Observable, of } from \"rxjs\";\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\n\n@Injectable()\nexport class MsalGuard implements CanActivate, CanActivateChild, CanLoad {\n    private loginFailedRoute?: UrlTree;\n\n    constructor(\n        @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,\n        private msalBroadcastService: MsalBroadcastService,\n        private authService: MsalService,\n        private location: Location,\n        private router: Router\n    ) { \n        // Subscribing so events in MsalGuard will set inProgress$ observable\n        this.msalBroadcastService.inProgress$.subscribe();\n    }\n\n    /**\n     * Parses url string to UrlTree\n     * @param url \n     */\n    parseUrl(url: string): UrlTree {\n        return this.router.parseUrl(url);\n    }\n\n    /**\n     * Builds the absolute url for the destination page\n     * @param path Relative path of requested page\n     * @returns Full destination url\n     */\n    getDestinationUrl(path: string): string {\n        this.authService.getLogger().verbose(\"Guard - getting destination url\");\n        // Absolute base url for the application (default to origin if base element not present)\n        const baseElements = document.getElementsByTagName(\"base\");\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\n\n        // Path of page (including hash, if using hash routing)\n        const pathUrl = this.location.prepareExternalUrl(path);\n\n        // Hash location strategy\n        if (pathUrl.startsWith(\"#\")) {\n            this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\n            return `${baseUrl}/${pathUrl}`;\n        }\n\n        /*\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\n         */\n        return `${baseUrl}${path}`;\n    }\n\n    /**\n     * Interactively prompt the user to login\n     * @param url Path of the requested page\n     */\n    private loginInteractively(state: RouterStateSnapshot): Observable<boolean> {\n        const authRequest = typeof this.msalGuardConfig.authRequest === \"function\"\n            ? this.msalGuardConfig.authRequest(this.authService, state)\n            : { ...this.msalGuardConfig.authRequest };\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\n            this.authService.getLogger().verbose(\"Guard - logging in by popup\");\n            return this.authService.loginPopup(authRequest as PopupRequest)\n                .pipe(\n                    map((response: AuthenticationResult) => {\n                        this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\n                        this.authService.instance.setActiveAccount(response.account);\n                        return true;\n                    })\n                );\n        }\n\n        this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\n        const redirectStartPage = this.getDestinationUrl(state.url);\n        return this.authService.loginRedirect({\n            redirectStartPage,\n            ...authRequest\n        } as RedirectRequest)\n            .pipe(\n                map(() => false)\n            );\n    }\n\n    /**\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\n     * @param state \n     */\n    private activateHelper(state?: RouterStateSnapshot): Observable<boolean|UrlTree> {\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\n        }\n        this.authService.getLogger().verbose(\"MSAL Guard activated\");\n\n        /*\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\n         * short-circuit to prevent redirecting or popups.\n         * TODO: Update to allow running in iframe once allowRedirectInIframe is implemented\n         */\n        if (typeof window !== \"undefined\") {\n            if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe()) {\n                this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\n                return of(false);\n            }\n        } else {\n            this.authService.getLogger().info(\"Guard - window is undefined, MSAL does not support server-side token acquisition\");\n            return of(true);\n        }\n\n        /**\n         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\n         */\n        if (this.msalGuardConfig.loginFailedRoute) {\n            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\n        }\n\n        // Capture current path before it gets changed by handleRedirectObservable\n        const currentPath = this.location.path(true);\n\n        return this.authService.handleRedirectObservable()\n            .pipe(\n                concatMap(() => {\n                    if (!this.authService.instance.getAllAccounts().length) {\n                        if (state) {\n                            this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\n                            return this.loginInteractively(state);\n                        } \n                        this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\n                        return of(false);\n                    }\n\n                    this.authService.getLogger().verbose(\"Guard - at least 1 account exists, can activate or load\");\n\n                    // Prevent navigating the app to /#code= or /code=\n                    if (state && currentPath.indexOf(\"code=\")> -1) {\n                        this.authService.getLogger().info(\"Guard - Hash contains known code response, stopping navigation.\");\n                        \n                        // Path routing (navigate to current path without hash)\n                        if (currentPath.indexOf(\"#\") > -1) {\n                            return of(this.parseUrl(this.location.path()));\n                        }\n                        \n                        // Hash routing (navigate to root path)\n                        return of(this.parseUrl(\"\"));\n                    }\n\n                    return of(true);\n\n                }),\n                catchError((error: Error) => {\n                    this.authService.getLogger().error(\"Guard - error while logging in, unable to activate\");\n                    this.authService.getLogger().errorPii(`Guard - error: ${error.message}`);\n                    /**\n                     * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\n                     * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\n                     */\n                    if (this.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\n                        this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\n                        return of(this.loginFailedRoute);\n                    }\n                    return of(false);\n                })\n            );\n    }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\n        this.authService.getLogger().verbose(\"Guard - canActivate\");\n        return this.activateHelper(state);\n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\n        this.authService.getLogger().verbose(\"Guard - canActivateChild\");\n        return this.activateHelper(state);\n    }\n\n    canLoad(): Observable<boolean> {\n        this.authService.getLogger().verbose(\"Guard - canLoad\");\n        // @ts-ignore\n        return this.activateHelper();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor\n} from \"@angular/common/http\";\nimport { Location, DOCUMENT } from \"@angular/common\";\nimport { Observable, EMPTY, of } from \"rxjs\";\nimport { switchMap, catchError } from \"rxjs/operators\";\nimport { MsalService } from \"./msal.service\";\nimport { AccountInfo, AuthenticationResult, BrowserConfigurationAuthError, InteractionType, StringUtils, UrlString } from \"@azure/msal-browser\";\nimport { Injectable, Inject } from \"@angular/core\";\nimport { MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\nimport { MsalInterceptorAuthRequest, MsalInterceptorConfiguration, ProtectedResourceScopes, MatchingResources } from \"./msal.interceptor.config\";\n\n@Injectable()\nexport class MsalInterceptor implements HttpInterceptor {\n    private _document?: Document;\n\n    constructor(\n        @Inject(MSAL_INTERCEPTOR_CONFIG) private msalInterceptorConfig: MsalInterceptorConfiguration,\n        private authService: MsalService,\n        private location: Location,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n        @Inject(DOCUMENT) document?: any\n    ) {\n        this._document = document as Document;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\n        }\n\n        this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\n        const scopes = this.getScopesForEndpoint(req.url, req.method);\n\n        // If no scopes for endpoint, does not acquire token\n        if (!scopes || scopes.length === 0) {\n            this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\n            return next.handle(req);\n        }\n\n        // Sets account as active account or first account\n        let account: AccountInfo;\n        if (!!this.authService.instance.getActiveAccount()) {\n            this.authService.getLogger().verbose(\"Interceptor - active account selected\");\n            account = this.authService.instance.getActiveAccount();\n        } else {\n            this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\n            account = this.authService.instance.getAllAccounts()[0];\n        }\n\n        const authRequest = typeof this.msalInterceptorConfig.authRequest === \"function\"\n            ? this.msalInterceptorConfig.authRequest(this.authService, req, { account: account })\n            : { ...this.msalInterceptorConfig.authRequest, account };\n\n        this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\n        this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\n\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\n        return this.authService.acquireTokenSilent({...authRequest, scopes, account })\n            .pipe(\n                catchError(() => {\n                    this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\n                    return this.acquireTokenInteractively(authRequest, scopes);\n                }),\n                switchMap((result: AuthenticationResult)  => {\n                    if (!result.accessToken) {\n                        this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\n                        return this.acquireTokenInteractively(authRequest, scopes);\n                    }\n                    return of(result);\n                }),\n                switchMap((result: AuthenticationResult) => {\n                    this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\n                    const headers = req.headers\n                        .set(\"Authorization\", `Bearer ${result.accessToken}`);\n\n                    const requestClone = req.clone({headers});\n                    return next.handle(requestClone);\n                })\n            );\n    }\n\n    /**\n     * Invoke interaction for the given set of scopes\n     * @param authRequest Request\n     * @param scopes Array of scopes for the request\n     * @returns Result from the interactive request\n     */\n    private acquireTokenInteractively(authRequest: MsalInterceptorAuthRequest, scopes: string[]): Observable<AuthenticationResult> {\n        if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\n            this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\n            return this.authService.acquireTokenPopup({ ...authRequest, scopes });\n        }\n        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\n        const redirectStartPage = window.location.href;\n        this.authService.acquireTokenRedirect({...authRequest, scopes, redirectStartPage });\n        return EMPTY;\n    }\n\n    /**\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\n     * @param endpoint Url of the request\n     * @param httpMethod Http method of the request\n     * @returns Array of scopes, or null if not found\n     *\n     */\n    private getScopesForEndpoint(endpoint: string, httpMethod: string): Array<string>|null {\n        this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\");\n\n        // Ensures endpoints and protected resources compared are normalized\n        const normalizedEndpoint = this.location.normalize(endpoint);\n\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\n\n        const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint);\n\n        // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\n        if (matchingProtectedResources.absoluteResources.length > 0) {\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.absoluteResources, httpMethod);\n        } else if (matchingProtectedResources.relativeResources.length > 0){\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.relativeResources, httpMethod);\n        }\n\n        return null;\n    }\n\n    /**\n     * Finds resource endpoints that match request endpoint\n     * @param protectedResourcesEndpoints\n     * @param endpoint \n     * @returns \n     */\n    private matchResourcesToEndpoint(protectedResourcesEndpoints: string[], endpoint: string): MatchingResources {\n        const matchingResources: MatchingResources = {absoluteResources: [], relativeResources: []};\n\n        protectedResourcesEndpoints.forEach(key => {\n            // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\n            const normalizedKey = this.location.normalize(key);\n            if (StringUtils.matchPattern(normalizedKey, endpoint)){\n                matchingResources.absoluteResources.push(key);\n            }\n            \n            // Get url components for relative urls\n            const absoluteKey = this.getAbsoluteUrl(key);\n            const keyComponents = new UrlString(absoluteKey).getUrlComponents();\n            const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\n            const endpointComponents = new UrlString(absoluteEndpoint).getUrlComponents();\n\n            // Normalized key should include query strings if applicable\n            const relativeNormalizedKey = keyComponents.QueryString ? `${keyComponents.AbsolutePath}?${keyComponents.QueryString}` : this.location.normalize(keyComponents.AbsolutePath);\n\n            // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\n            if (keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort && StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) && relativeNormalizedKey !== \"\" && relativeNormalizedKey !== \"/*\"){\n                matchingResources.relativeResources.push(key);\n            }\n        });\n\n        return matchingResources;\n    }\n\n    /**\n     * Transforms relative urls to absolute urls\n     * @param url \n     * @returns \n     */\n    private getAbsoluteUrl(url: string): string {\n        const link = this._document.createElement(\"a\");\n        link.href = url;\n        return link.href;\n    }\n\n    /**\n     * Finds scopes from first matching endpoint with HTTP method that matches request\n     * @param protectedResourceMap Protected resource map\n     * @param endpointArray Array of resources that match request endpoint\n     * @param httpMethod Http method of the request\n     * @returns \n     */\n    private matchScopesToEndpoint(protectedResourceMap: Map<string, Array<string|ProtectedResourceScopes> | null>, endpointArray: string[], httpMethod: string): Array<string>|null {\n        const allMatchedScopes = [];\n\n        // Check each matched endpoint for matching HttpMethod and scopes\n        endpointArray.forEach(matchedEndpoint => {\n            const scopesForEndpoint = [];\n            const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint);\n\n            // Return if resource is unprotected\n            if (methodAndScopesArray === null) {\n                allMatchedScopes.push(null);\n                return;\n            }\n\n            methodAndScopesArray.forEach(entry => {\n                // Entry is either array of scopes or ProtectedResourceScopes object\n                if (typeof entry === \"string\") {\n                    scopesForEndpoint.push(entry);\n                } else {\n                    // Ensure methods being compared are normalized\n                    const normalizedRequestMethod = httpMethod.toLowerCase();\n                    const normalizedResourceMethod = entry.httpMethod.toLowerCase();\n\n                    // Method in protectedResourceMap matches request http method\n                    if (normalizedResourceMethod === normalizedRequestMethod) {\n                        entry.scopes.forEach(scope => {\n                            scopesForEndpoint.push(scope);\n                        });\n                    }\n                }\n            });\n\n            // Only add to all scopes if scopes for endpoint and method is found\n            if (scopesForEndpoint.length > 0) {\n                allMatchedScopes.push(scopesForEndpoint);\n            }\n        });\n\n        if (allMatchedScopes.length > 0) {\n            if (allMatchedScopes.length > 1) {\n                this.authService.getLogger().warning(\"Interceptor - More than 1 matching scopes for endpoint found.\");\n            }\n            // Returns scopes for first matching endpoint\n            return allMatchedScopes[0];\n        }\n\n        return null;\n    }\n\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * This is a dedicated redirect component to be added to Angular apps to \n * handle redirects when using @azure/msal-angular.\n * Import this component to use redirects in your app.\n */\n\nimport { Component, OnInit } from \"@angular/core\";\nimport { MsalService } from \"./msal.service\";\n\n@Component({\n    selector: \"app-redirect\",\n    template: \"\"\n})\nexport class MsalRedirectComponent implements OnInit {\n\n    constructor(private authService: MsalService) { }\n\n    ngOnInit(): void {    \n        this.authService.getLogger().verbose(\"MsalRedirectComponent activated\");\n        this.authService.handleRedirectObservable().subscribe();\n    }\n\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\nimport { MsalGuard } from \"./msal.guard\";\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\nimport { MsalService } from \"./msal.service\";\nimport { MSAL_INSTANCE , MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\nimport { MsalRedirectComponent } from \"./msal.redirect.component\";\n\n@NgModule({\n    declarations: [MsalRedirectComponent],\n    imports: [\n        CommonModule\n    ],\n    providers: [\n        MsalGuard,\n        MsalBroadcastService\n    ]\n})\nexport class MsalModule {\n    static forRoot(\n        msalInstance: IPublicClientApplication,\n        guardConfig: MsalGuardConfiguration,\n        interceptorConfig: MsalInterceptorConfiguration\n    ): ModuleWithProviders<MsalModule> {\n        return {\n            ngModule: MsalModule,\n            providers: [\n                {\n                    provide: MSAL_INSTANCE,\n                    useValue: msalInstance\n                },\n                {\n                    provide: MSAL_GUARD_CONFIG,\n                    useValue: guardConfig\n                },\n                {\n                    provide: MSAL_INTERCEPTOR_CONFIG,\n                    useValue: interceptorConfig\n                },\n                MsalService\n            ]\n        };\n    }\n\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NavigationClient, NavigationOptions, UrlString } from \"@azure/msal-browser\";\nimport { Router } from \"@angular/router\";\nimport { Location } from \"@angular/common\";\nimport { MsalService } from \"./msal.service\";\nimport { Injectable } from \"@angular/core\";\n\n/**\n * Custom navigation used for Angular client-side navigation.\n * See performance doc for details:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/v2-docs/performance.md\n */\n@Injectable()\nexport class MsalCustomNavigationClient extends NavigationClient {\n\n    constructor(\n        private authService: MsalService,\n        private router: Router, \n        private location: Location\n    ) {\n        super();\n    }\n\n    async navigateInternal(url:string, options: NavigationOptions): Promise<boolean> {\n        this.authService.getLogger().trace(\"MsalCustomNavigationClient called\");\n        \n        this.authService.getLogger().verbose(\"MsalCustomNavigationClient - navigating\");\n        this.authService.getLogger().verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`);\n        \n        // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\n        if (options.noHistory) {\n            return super.navigateInternal(url, options);\n        } else {\n            // Normalizing newUrl if no query string\n            const urlComponents = new UrlString(url).getUrlComponents();\n            const newUrl = urlComponents.QueryString ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}` : this.location.normalize(urlComponents.AbsolutePath);\n            this.router.navigateByUrl(newUrl, { replaceUrl: options.noHistory });\n        }\n        return Promise.resolve(options.noHistory);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * @packageDocumentation\n * @module @azure/msal-angular\n */\n\nexport { MsalService } from \"./msal.service\";\nexport { IMsalService } from \"./IMsalService\";\nexport { MsalGuard } from \"./msal.guard\";\nexport { MsalGuardConfiguration, MsalGuardAuthRequest } from \"./msal.guard.config\";\nexport { MsalInterceptor } from \"./msal.interceptor\";\nexport { MsalInterceptorConfiguration, MsalInterceptorAuthRequest, ProtectedResourceScopes } from \"./msal.interceptor.config\";\nexport { MSAL_INSTANCE, MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\nexport { MsalBroadcastService } from \"./msal.broadcast.service\";\nexport { MsalModule } from \"./msal.module\";\nexport { MsalRedirectComponent } from \"./msal.redirect.component\";\nexport { MsalCustomNavigationClient } from \"./msal.navigation.client\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}